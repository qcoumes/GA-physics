// Copyright (c) 2018 by University Paris-Est Marne-la-Vallee
// Inner.hpp
// This file is part of the Garamon for c3ga2.
// Authors: Stephane Breuils and Vincent Nozick
// Contact: vincent.nozick@u-pem.fr
//
// Licence MIT
// A a copy of the MIT License is given along with this program

// \file BasisTransformations.hpp
// \author V. Nozick, S. Breuils
// \brief this files generates and load the elements of the transformation matrices into array of Eigen matrices 


#ifndef C3GA2_BASISTRANSFORMATIONS_HPP__
#define C3GA2_BASISTRANSFORMATIONS_HPP__
#pragma once


#include <Eigen/Sparse>
#include <vector>
#include <array>
#include <algorithm>
#include <iterator>
#include <sstream>


/*!
 * @namespace c3ga2
 */
namespace c3ga2{

	/// Decode the string encodedPerGradeMatrixComponents to a vector of T. This vector will contain the components of the transformation matrices
	template<typename T>
	const std::vector<T> decodeStringToVecOfT(std::string encodedPerGradeMatrixComponents) {
	    std::vector<T> resultDecodedGrade;
	    std::istringstream streamStringOverFloat(encodedPerGradeMatrixComponents);
	    std::copy(std::istream_iterator<float>(streamStringOverFloat),
		std::istream_iterator<float>(),
		std::back_inserter(resultDecodedGrade));
	    return resultDecodedGrade;
	}

	/// contains and load the components of the grade 0 direct transformation matrix 
 	template<typename T>
	Eigen::SparseMatrix<T, Eigen::ColMajor>  loadgrade0Matrix() {
		const std::string grade0MatrixComponents = " 0 0 1.000000 ";
		std::vector<T> gradeVectorComponents = decodeStringToVecOfT<T>(grade0MatrixComponents);
		Eigen::SparseMatrix<T, Eigen::ColMajor> perGradeBasisTransformMatrix		 = Eigen::SparseMatrix<T, Eigen::ColMajor>(1,1);
		perGradeBasisTransformMatrix.reserve(1);
		perGradeBasisTransformMatrix.insert((int)gradeVectorComponents[0],(int)gradeVectorComponents[1]) = gradeVectorComponents[2];
		return perGradeBasisTransformMatrix;
	}

	/// contains and load the components of the grade 1 direct transformation matrix 
 	template<typename T>
	Eigen::SparseMatrix<T, Eigen::ColMajor>  loadgrade1Matrix() {
		const std::string grade1MatrixComponents = " 0 0 1.000000 4 0 -1.000000 0 1 1.000000 4 1 1.000000 2 2 1.000000 3 3 1.000000 1 4 1.000000 5 5 1.000000 9 5 -1.000000 5 6 1.000000 9 6 1.000000 7 7 1.000000 8 8 1.000000 6 9 1.000000 ";
		std::vector<T> gradeVectorComponents = decodeStringToVecOfT<T>(grade1MatrixComponents);
		Eigen::SparseMatrix<T, Eigen::ColMajor> perGradeBasisTransformMatrix		 = Eigen::SparseMatrix<T, Eigen::ColMajor>(10,10);
		perGradeBasisTransformMatrix.reserve(14);
		for(unsigned int i=0;i<14;++i)
			perGradeBasisTransformMatrix.insert((int)gradeVectorComponents[3*i],(int)gradeVectorComponents[(3*i)+1]) = gradeVectorComponents[(3*i)+2];
		return perGradeBasisTransformMatrix;
	}

	/// contains and load the components of the grade 2 direct transformation matrix 
 	template<typename T>
	Eigen::SparseMatrix<T, Eigen::ColMajor>  loadgrade2Matrix() {
		const std::string grade2MatrixComponents = " 3 0 2.000000 1 1 1.000000 18 1 1.000000 2 2 1.000000 24 2 1.000000 0 3 1.000000 11 3 1.000000 4 4 1.000000 8 4 -1.000000 30 4 -1.000000 34 4 1.000000 4 5 1.000000 8 5 1.000000 30 5 -1.000000 34 5 -1.000000 6 6 1.000000 32 6 -1.000000 7 7 1.000000 33 7 -1.000000 5 8 1.000000 31 8 -1.000000 1 9 1.000000 18 9 -1.000000 2 10 1.000000 24 10 -1.000000 0 11 1.000000 11 11 -1.000000 4 12 1.000000 8 12 -1.000000 30 12 1.000000 34 12 -1.000000 4 13 1.000000 8 13 1.000000 30 13 1.000000 34 13 1.000000 6 14 1.000000 32 14 1.000000 7 15 1.000000 33 15 1.000000 5 16 1.000000 31 16 1.000000 17 17 1.000000 9 18 -1.000000 19 19 1.000000 23 19 -1.000000 19 20 1.000000 23 20 1.000000 21 21 1.000000 22 22 1.000000 20 23 1.000000 10 24 -1.000000 25 25 1.000000 29 25 -1.000000 25 26 1.000000 29 26 1.000000 27 27 1.000000 28 28 1.000000 26 29 1.000000 12 30 1.000000 16 30 -1.000000 12 31 1.000000 16 31 1.000000 14 32 1.000000 15 33 1.000000 13 34 1.000000 38 35 2.000000 36 36 1.000000 43 36 1.000000 37 37 1.000000 44 37 1.000000 35 38 1.000000 41 38 1.000000 36 39 1.000000 43 39 -1.000000 37 40 1.000000 44 40 -1.000000 35 41 1.000000 41 41 -1.000000 42 42 1.000000 39 43 -1.000000 40 44 -1.000000 ";
		std::vector<T> gradeVectorComponents = decodeStringToVecOfT<T>(grade2MatrixComponents);
		Eigen::SparseMatrix<T, Eigen::ColMajor> perGradeBasisTransformMatrix		 = Eigen::SparseMatrix<T, Eigen::ColMajor>(45,45);
		perGradeBasisTransformMatrix.reserve(81);
		for(unsigned int i=0;i<81;++i)
			perGradeBasisTransformMatrix.insert((int)gradeVectorComponents[3*i],(int)gradeVectorComponents[(3*i)+1]) = gradeVectorComponents[(3*i)+2];
		return perGradeBasisTransformMatrix;
	}

	/// contains and load the components of the grade 3 direct transformation matrix 
 	template<typename T>
	Eigen::SparseMatrix<T, Eigen::ColMajor>  loadgrade3Matrix() {
		const std::string grade3MatrixComponents = " 9 0 -2.000000 15 1 -2.000000 2 2 -2.000000 21 3 2.000000 25 3 -2.000000 21 4 2.000000 25 4 2.000000 23 5 2.000000 24 6 2.000000 22 7 2.000000 8 8 1.000000 64 8 -1.000000 0 9 -1.000000 37 9 1.000000 10 10 1.000000 14 10 -1.000000 70 10 1.000000 74 10 -1.000000 10 11 1.000000 14 11 1.000000 70 11 1.000000 74 11 1.000000 12 12 1.000000 72 12 1.000000 13 13 1.000000 73 13 1.000000 11 14 1.000000 71 14 1.000000 1 15 -1.000000 43 15 1.000000 16 16 1.000000 20 16 -1.000000 85 16 1.000000 89 16 -1.000000 16 17 1.000000 20 17 1.000000 85 17 1.000000 89 17 1.000000 18 18 1.000000 87 18 1.000000 19 19 1.000000 88 19 1.000000 17 20 1.000000 86 20 1.000000 3 21 1.000000 7 21 -1.000000 49 21 1.000000 53 21 -1.000000 3 22 1.000000 7 22 1.000000 49 22 1.000000 53 22 1.000000 5 23 1.000000 51 23 1.000000 6 24 1.000000 52 24 1.000000 4 25 1.000000 50 25 1.000000 29 26 2.000000 103 26 -2.000000 27 27 1.000000 34 27 1.000000 101 27 -1.000000 108 27 -1.000000 28 28 1.000000 35 28 1.000000 102 28 -1.000000 109 28 -1.000000 26 29 1.000000 32 29 1.000000 100 29 -1.000000 106 29 -1.000000 27 30 1.000000 34 30 -1.000000 101 30 -1.000000 108 30 1.000000 28 31 1.000000 35 31 -1.000000 102 31 -1.000000 109 31 1.000000 26 32 1.000000 32 32 -1.000000 100 32 -1.000000 106 32 1.000000 33 33 1.000000 107 33 -1.000000 30 34 -1.000000 104 34 1.000000 31 35 -1.000000 105 35 1.000000 8 36 1.000000 64 36 1.000000 0 37 -1.000000 37 37 -1.000000 10 38 1.000000 14 38 -1.000000 70 38 -1.000000 74 38 1.000000 10 39 1.000000 14 39 1.000000 70 39 -1.000000 74 39 -1.000000 12 40 1.000000 72 40 -1.000000 13 41 1.000000 73 41 -1.000000 11 42 1.000000 71 42 -1.000000 1 43 -1.000000 43 43 -1.000000 16 44 1.000000 20 44 -1.000000 85 44 -1.000000 89 44 1.000000 16 45 1.000000 20 45 1.000000 85 45 -1.000000 89 45 -1.000000 18 46 1.000000 87 46 -1.000000 19 47 1.000000 88 47 -1.000000 17 48 1.000000 86 48 -1.000000 3 49 1.000000 7 49 -1.000000 49 49 -1.000000 53 49 1.000000 3 50 1.000000 7 50 1.000000 49 50 -1.000000 53 50 -1.000000 5 51 1.000000 51 51 -1.000000 6 52 1.000000 52 52 -1.000000 4 53 1.000000 50 53 -1.000000 29 54 2.000000 103 54 2.000000 27 55 1.000000 34 55 1.000000 101 55 1.000000 108 55 1.000000 28 56 1.000000 35 56 1.000000 102 56 1.000000 109 56 1.000000 26 57 1.000000 32 57 1.000000 100 57 1.000000 106 57 1.000000 27 58 1.000000 34 58 -1.000000 101 58 1.000000 108 58 -1.000000 28 59 1.000000 35 59 -1.000000 102 59 1.000000 109 59 -1.000000 26 60 1.000000 32 60 -1.000000 100 60 1.000000 106 60 -1.000000 33 61 1.000000 107 61 1.000000 30 62 -1.000000 104 62 -1.000000 31 63 -1.000000 105 63 -1.000000 36 64 1.000000 65 65 1.000000 69 65 -1.000000 65 66 1.000000 69 66 1.000000 67 67 1.000000 68 68 1.000000 66 69 1.000000 38 70 -1.000000 42 70 1.000000 38 71 -1.000000 42 71 -1.000000 40 72 -1.000000 41 73 -1.000000 39 74 -1.000000 78 75 2.000000 76 76 1.000000 83 76 1.000000 77 77 1.000000 84 77 1.000000 75 78 1.000000 81 78 1.000000 76 79 1.000000 83 79 -1.000000 77 80 1.000000 84 80 -1.000000 75 81 1.000000 81 81 -1.000000 82 82 1.000000 79 83 -1.000000 80 84 -1.000000 44 85 -1.000000 48 85 1.000000 44 86 -1.000000 48 86 -1.000000 46 87 -1.000000 47 88 -1.000000 45 89 -1.000000 93 90 2.000000 91 91 1.000000 98 91 1.000000 92 92 1.000000 99 92 1.000000 90 93 1.000000 96 93 1.000000 91 94 1.000000 98 94 -1.000000 92 95 1.000000 99 95 -1.000000 90 96 1.000000 96 96 -1.000000 97 97 1.000000 94 98 -1.000000 95 99 -1.000000 57 100 2.000000 55 101 1.000000 62 101 1.000000 56 102 1.000000 63 102 1.000000 54 103 1.000000 60 103 1.000000 55 104 1.000000 62 104 -1.000000 56 105 1.000000 63 105 -1.000000 54 106 1.000000 60 106 -1.000000 61 107 1.000000 58 108 -1.000000 59 109 -1.000000 114 110 -2.000000 115 111 -2.000000 112 112 -2.000000 113 113 1.000000 119 113 -1.000000 110 114 -1.000000 117 114 1.000000 111 115 -1.000000 118 115 1.000000 113 116 1.000000 119 116 1.000000 110 117 -1.000000 117 117 -1.000000 111 118 -1.000000 118 118 -1.000000 116 119 1.000000 ";
		std::vector<T> gradeVectorComponents = decodeStringToVecOfT<T>(grade3MatrixComponents);
		Eigen::SparseMatrix<T, Eigen::ColMajor> perGradeBasisTransformMatrix		 = Eigen::SparseMatrix<T, Eigen::ColMajor>(120,120);
		perGradeBasisTransformMatrix.reserve(256);
		for(unsigned int i=0;i<256;++i)
			perGradeBasisTransformMatrix.insert((int)gradeVectorComponents[3*i],(int)gradeVectorComponents[(3*i)+1]) = gradeVectorComponents[(3*i)+2];
		return perGradeBasisTransformMatrix;
	}

	/// contains and load the components of the grade 4 direct transformation matrix 
 	template<typename T>
	Eigen::SparseMatrix<T, Eigen::ColMajor>  loadgrade4Matrix() {
		const std::string grade4MatrixComponents = " 28 0 2.000000 1 1 -2.000000 34 2 -2.000000 38 2 2.000000 34 3 -2.000000 38 3 -2.000000 36 4 -2.000000 37 5 -2.000000 35 6 -2.000000 7 7 -2.000000 49 8 -2.000000 53 8 2.000000 49 9 -2.000000 53 9 -2.000000 51 10 -2.000000 52 11 -2.000000 50 12 -2.000000 13 13 -2.000000 17 13 2.000000 13 14 -2.000000 17 14 -2.000000 15 15 -2.000000 16 16 -2.000000 14 17 -2.000000 67 18 4.000000 65 19 2.000000 72 19 2.000000 66 20 2.000000 73 20 2.000000 64 21 2.000000 70 21 2.000000 65 22 2.000000 72 22 -2.000000 66 23 2.000000 73 23 -2.000000 64 24 2.000000 70 24 -2.000000 71 25 2.000000 68 26 -2.000000 69 27 -2.000000 0 28 1.000000 84 28 1.000000 29 29 1.000000 33 29 -1.000000 140 29 -1.000000 144 29 1.000000 29 30 1.000000 33 30 1.000000 140 30 -1.000000 144 30 -1.000000 31 31 1.000000 142 31 -1.000000 32 32 1.000000 143 32 -1.000000 30 33 1.000000 141 33 -1.000000 2 34 -1.000000 6 34 1.000000 90 34 1.000000 94 34 -1.000000 2 35 -1.000000 6 35 -1.000000 90 35 1.000000 94 35 1.000000 4 36 -1.000000 92 36 1.000000 5 37 -1.000000 93 37 1.000000 3 38 -1.000000 91 38 1.000000 42 39 2.000000 158 39 2.000000 40 40 1.000000 47 40 1.000000 156 40 1.000000 163 40 1.000000 41 41 1.000000 48 41 1.000000 157 41 1.000000 164 41 1.000000 39 42 1.000000 45 42 1.000000 155 42 1.000000 161 42 1.000000 40 43 1.000000 47 43 -1.000000 156 43 1.000000 163 43 -1.000000 41 44 1.000000 48 44 -1.000000 157 44 1.000000 164 44 -1.000000 39 45 1.000000 45 45 -1.000000 155 45 1.000000 161 45 -1.000000 46 46 1.000000 162 46 1.000000 43 47 -1.000000 159 47 -1.000000 44 48 -1.000000 160 48 -1.000000 8 49 -1.000000 12 49 1.000000 105 49 1.000000 109 49 -1.000000 8 50 -1.000000 12 50 -1.000000 105 50 1.000000 109 50 1.000000 10 51 -1.000000 107 51 1.000000 11 52 -1.000000 108 52 1.000000 9 53 -1.000000 106 53 1.000000 57 54 2.000000 178 54 2.000000 55 55 1.000000 62 55 1.000000 176 55 1.000000 183 55 1.000000 56 56 1.000000 63 56 1.000000 177 56 1.000000 184 56 1.000000 54 57 1.000000 60 57 1.000000 175 57 1.000000 181 57 1.000000 55 58 1.000000 62 58 -1.000000 176 58 1.000000 183 58 -1.000000 56 59 1.000000 63 59 -1.000000 177 59 1.000000 184 59 -1.000000 54 60 1.000000 60 60 -1.000000 175 60 1.000000 181 60 -1.000000 61 61 1.000000 182 61 1.000000 58 62 -1.000000 179 62 -1.000000 59 63 -1.000000 180 63 -1.000000 21 64 2.000000 123 64 2.000000 19 65 1.000000 26 65 1.000000 121 65 1.000000 128 65 1.000000 20 66 1.000000 27 66 1.000000 122 66 1.000000 129 66 1.000000 18 67 1.000000 24 67 1.000000 120 67 1.000000 126 67 1.000000 19 68 1.000000 26 68 -1.000000 121 68 1.000000 128 68 -1.000000 20 69 1.000000 27 69 -1.000000 122 69 1.000000 129 69 -1.000000 18 70 1.000000 24 70 -1.000000 120 70 1.000000 126 70 -1.000000 25 71 1.000000 127 71 1.000000 22 72 -1.000000 124 72 -1.000000 23 73 -1.000000 125 73 -1.000000 78 74 -2.000000 199 74 2.000000 79 75 -2.000000 200 75 2.000000 76 76 -2.000000 197 76 2.000000 77 77 1.000000 83 77 -1.000000 198 77 -1.000000 204 77 1.000000 74 78 -1.000000 81 78 1.000000 195 78 1.000000 202 78 -1.000000 75 79 -1.000000 82 79 1.000000 196 79 1.000000 203 79 -1.000000 77 80 1.000000 83 80 1.000000 198 80 -1.000000 204 80 -1.000000 74 81 -1.000000 81 81 -1.000000 195 81 1.000000 202 81 1.000000 75 82 -1.000000 82 82 -1.000000 196 82 1.000000 203 82 1.000000 80 83 1.000000 201 83 -1.000000 0 84 1.000000 84 84 -1.000000 29 85 1.000000 33 85 -1.000000 140 85 1.000000 144 85 -1.000000 29 86 1.000000 33 86 1.000000 140 86 1.000000 144 86 1.000000 31 87 1.000000 142 87 1.000000 32 88 1.000000 143 88 1.000000 30 89 1.000000 141 89 1.000000 2 90 -1.000000 6 90 1.000000 90 90 -1.000000 94 90 1.000000 2 91 -1.000000 6 91 -1.000000 90 91 -1.000000 94 91 -1.000000 4 92 -1.000000 92 92 -1.000000 5 93 -1.000000 93 93 -1.000000 3 94 -1.000000 91 94 -1.000000 42 95 2.000000 158 95 -2.000000 40 96 1.000000 47 96 1.000000 156 96 -1.000000 163 96 -1.000000 41 97 1.000000 48 97 1.000000 157 97 -1.000000 164 97 -1.000000 39 98 1.000000 45 98 1.000000 155 98 -1.000000 161 98 -1.000000 40 99 1.000000 47 99 -1.000000 156 99 -1.000000 163 99 1.000000 41 100 1.000000 48 100 -1.000000 157 100 -1.000000 164 100 1.000000 39 101 1.000000 45 101 -1.000000 155 101 -1.000000 161 101 1.000000 46 102 1.000000 162 102 -1.000000 43 103 -1.000000 159 103 1.000000 44 104 -1.000000 160 104 1.000000 8 105 -1.000000 12 105 1.000000 105 105 -1.000000 109 105 1.000000 8 106 -1.000000 12 106 -1.000000 105 106 -1.000000 109 106 -1.000000 10 107 -1.000000 107 107 -1.000000 11 108 -1.000000 108 108 -1.000000 9 109 -1.000000 106 109 -1.000000 57 110 2.000000 178 110 -2.000000 55 111 1.000000 62 111 1.000000 176 111 -1.000000 183 111 -1.000000 56 112 1.000000 63 112 1.000000 177 112 -1.000000 184 112 -1.000000 54 113 1.000000 60 113 1.000000 175 113 -1.000000 181 113 -1.000000 55 114 1.000000 62 114 -1.000000 176 114 -1.000000 183 114 1.000000 56 115 1.000000 63 115 -1.000000 177 115 -1.000000 184 115 1.000000 54 116 1.000000 60 116 -1.000000 175 116 -1.000000 181 116 1.000000 61 117 1.000000 182 117 -1.000000 58 118 -1.000000 179 118 1.000000 59 119 -1.000000 180 119 1.000000 21 120 2.000000 123 120 -2.000000 19 121 1.000000 26 121 1.000000 121 121 -1.000000 128 121 -1.000000 20 122 1.000000 27 122 1.000000 122 122 -1.000000 129 122 -1.000000 18 123 1.000000 24 123 1.000000 120 123 -1.000000 126 123 -1.000000 19 124 1.000000 26 124 -1.000000 121 124 -1.000000 128 124 1.000000 20 125 1.000000 27 125 -1.000000 122 125 -1.000000 129 125 1.000000 18 126 1.000000 24 126 -1.000000 120 126 -1.000000 126 126 1.000000 25 127 1.000000 127 127 -1.000000 22 128 -1.000000 124 128 1.000000 23 129 -1.000000 125 129 1.000000 78 130 -2.000000 199 130 -2.000000 79 131 -2.000000 200 131 -2.000000 76 132 -2.000000 197 132 -2.000000 77 133 1.000000 83 133 -1.000000 198 133 1.000000 204 133 -1.000000 74 134 -1.000000 81 134 1.000000 195 134 -1.000000 202 134 1.000000 75 135 -1.000000 82 135 1.000000 196 135 -1.000000 203 135 1.000000 77 136 1.000000 83 136 1.000000 198 136 1.000000 204 136 1.000000 74 137 -1.000000 81 137 -1.000000 195 137 -1.000000 202 137 -1.000000 75 138 -1.000000 82 138 -1.000000 196 138 -1.000000 203 138 -1.000000 80 139 1.000000 201 139 1.000000 85 140 1.000000 89 140 -1.000000 85 141 1.000000 89 141 1.000000 87 142 1.000000 88 143 1.000000 86 144 1.000000 148 145 2.000000 146 146 1.000000 153 146 1.000000 147 147 1.000000 154 147 1.000000 145 148 1.000000 151 148 1.000000 146 149 1.000000 153 149 -1.000000 147 150 1.000000 154 150 -1.000000 145 151 1.000000 151 151 -1.000000 152 152 1.000000 149 153 -1.000000 150 154 -1.000000 98 155 -2.000000 96 156 -1.000000 103 156 -1.000000 97 157 -1.000000 104 157 -1.000000 95 158 -1.000000 101 158 -1.000000 96 159 -1.000000 103 159 1.000000 97 160 -1.000000 104 160 1.000000 95 161 -1.000000 101 161 1.000000 102 162 -1.000000 99 163 1.000000 100 164 1.000000 169 165 -2.000000 170 166 -2.000000 167 167 -2.000000 168 168 1.000000 174 168 -1.000000 165 169 -1.000000 172 169 1.000000 166 170 -1.000000 173 170 1.000000 168 171 1.000000 174 171 1.000000 165 172 -1.000000 172 172 -1.000000 166 173 -1.000000 173 173 -1.000000 171 174 1.000000 113 175 -2.000000 111 176 -1.000000 118 176 -1.000000 112 177 -1.000000 119 177 -1.000000 110 178 -1.000000 116 178 -1.000000 111 179 -1.000000 118 179 1.000000 112 180 -1.000000 119 180 1.000000 110 181 -1.000000 116 181 1.000000 117 182 -1.000000 114 183 1.000000 115 184 1.000000 189 185 -2.000000 190 186 -2.000000 187 187 -2.000000 188 188 1.000000 194 188 -1.000000 185 189 -1.000000 192 189 1.000000 186 190 -1.000000 193 190 1.000000 188 191 1.000000 194 191 1.000000 185 192 -1.000000 192 192 -1.000000 186 193 -1.000000 193 193 -1.000000 191 194 1.000000 134 195 -2.000000 135 196 -2.000000 132 197 -2.000000 133 198 1.000000 139 198 -1.000000 130 199 -1.000000 137 199 1.000000 131 200 -1.000000 138 200 1.000000 133 201 1.000000 139 201 1.000000 130 202 -1.000000 137 202 -1.000000 131 203 -1.000000 138 203 -1.000000 136 204 1.000000 208 205 2.000000 206 206 -2.000000 207 207 -2.000000 205 208 1.000000 209 208 1.000000 205 209 1.000000 209 209 -1.000000 ";
		std::vector<T> gradeVectorComponents = decodeStringToVecOfT<T>(grade4MatrixComponents);
		Eigen::SparseMatrix<T, Eigen::ColMajor> perGradeBasisTransformMatrix		 = Eigen::SparseMatrix<T, Eigen::ColMajor>(210,210);
		perGradeBasisTransformMatrix.reserve(494);
		for(unsigned int i=0;i<494;++i)
			perGradeBasisTransformMatrix.insert((int)gradeVectorComponents[3*i],(int)gradeVectorComponents[(3*i)+1]) = gradeVectorComponents[(3*i)+2];
		return perGradeBasisTransformMatrix;
	}

	/// contains and load the components of the grade 5 direct transformation matrix 
 	template<typename T>
	Eigen::SparseMatrix<T, Eigen::ColMajor>  loadgrade5Matrix() {
		const std::string grade5MatrixComponents = " 0 0 -2.000000 56 1 2.000000 60 1 -2.000000 56 2 2.000000 60 2 2.000000 58 3 2.000000 59 4 2.000000 57 5 2.000000 6 6 -2.000000 10 6 2.000000 6 7 -2.000000 10 7 -2.000000 8 8 -2.000000 9 9 -2.000000 7 10 -2.000000 74 11 -4.000000 72 12 -2.000000 79 12 -2.000000 73 13 -2.000000 80 13 -2.000000 71 14 -2.000000 77 14 -2.000000 72 15 -2.000000 79 15 2.000000 73 16 -2.000000 80 16 2.000000 71 17 -2.000000 77 17 2.000000 78 18 -2.000000 75 19 2.000000 76 20 2.000000 21 21 -2.000000 25 21 2.000000 21 22 -2.000000 25 22 -2.000000 23 23 -2.000000 24 24 -2.000000 22 25 -2.000000 94 26 -4.000000 92 27 -2.000000 99 27 -2.000000 93 28 -2.000000 100 28 -2.000000 91 29 -2.000000 97 29 -2.000000 92 30 -2.000000 99 30 2.000000 93 31 -2.000000 100 31 2.000000 91 32 -2.000000 97 32 2.000000 98 33 -2.000000 95 34 2.000000 96 35 2.000000 39 36 -4.000000 37 37 -2.000000 44 37 -2.000000 38 38 -2.000000 45 38 -2.000000 36 39 -2.000000 42 39 -2.000000 37 40 -2.000000 44 40 2.000000 38 41 -2.000000 45 41 2.000000 36 42 -2.000000 42 42 2.000000 43 43 -2.000000 40 44 2.000000 41 45 2.000000 115 46 -4.000000 116 47 -4.000000 113 48 -4.000000 114 49 2.000000 120 49 -2.000000 111 50 -2.000000 118 50 2.000000 112 51 -2.000000 119 51 2.000000 114 52 2.000000 120 52 2.000000 111 53 -2.000000 118 53 -2.000000 112 54 -2.000000 119 54 -2.000000 117 55 2.000000 1 56 1.000000 5 56 -1.000000 126 56 1.000000 130 56 -1.000000 1 57 1.000000 5 57 1.000000 126 57 1.000000 130 57 1.000000 3 58 1.000000 128 58 1.000000 4 59 1.000000 129 59 1.000000 2 60 1.000000 127 60 1.000000 64 61 2.000000 199 61 -2.000000 62 62 1.000000 69 62 1.000000 197 62 -1.000000 204 62 -1.000000 63 63 1.000000 70 63 1.000000 198 63 -1.000000 205 63 -1.000000 61 64 1.000000 67 64 1.000000 196 64 -1.000000 202 64 -1.000000 62 65 1.000000 69 65 -1.000000 197 65 -1.000000 204 65 1.000000 63 66 1.000000 70 66 -1.000000 198 66 -1.000000 205 66 1.000000 61 67 1.000000 67 67 -1.000000 196 67 -1.000000 202 67 1.000000 68 68 1.000000 203 68 -1.000000 65 69 -1.000000 200 69 1.000000 66 70 -1.000000 201 70 1.000000 14 71 -2.000000 144 71 2.000000 12 72 -1.000000 19 72 -1.000000 142 72 1.000000 149 72 1.000000 13 73 -1.000000 20 73 -1.000000 143 73 1.000000 150 73 1.000000 11 74 -1.000000 17 74 -1.000000 141 74 1.000000 147 74 1.000000 12 75 -1.000000 19 75 1.000000 142 75 1.000000 149 75 -1.000000 13 76 -1.000000 20 76 1.000000 143 76 1.000000 150 76 -1.000000 11 77 -1.000000 17 77 1.000000 141 77 1.000000 147 77 -1.000000 18 78 -1.000000 148 78 1.000000 15 79 1.000000 145 79 -1.000000 16 80 1.000000 146 80 -1.000000 85 81 -2.000000 220 81 -2.000000 86 82 -2.000000 221 82 -2.000000 83 83 -2.000000 218 83 -2.000000 84 84 1.000000 90 84 -1.000000 219 84 1.000000 225 84 -1.000000 81 85 -1.000000 88 85 1.000000 216 85 -1.000000 223 85 1.000000 82 86 -1.000000 89 86 1.000000 217 86 -1.000000 224 86 1.000000 84 87 1.000000 90 87 1.000000 219 87 1.000000 225 87 1.000000 81 88 -1.000000 88 88 -1.000000 216 88 -1.000000 223 88 -1.000000 82 89 -1.000000 89 89 -1.000000 217 89 -1.000000 224 89 -1.000000 87 90 1.000000 222 90 1.000000 29 91 -2.000000 164 91 2.000000 27 92 -1.000000 34 92 -1.000000 162 92 1.000000 169 92 1.000000 28 93 -1.000000 35 93 -1.000000 163 93 1.000000 170 93 1.000000 26 94 -1.000000 32 94 -1.000000 161 94 1.000000 167 94 1.000000 27 95 -1.000000 34 95 1.000000 162 95 1.000000 169 95 -1.000000 28 96 -1.000000 35 96 1.000000 163 96 1.000000 170 96 -1.000000 26 97 -1.000000 32 97 1.000000 161 97 1.000000 167 97 -1.000000 33 98 -1.000000 168 98 1.000000 30 99 1.000000 165 99 -1.000000 31 100 1.000000 166 100 -1.000000 105 101 -2.000000 235 101 -2.000000 106 102 -2.000000 236 102 -2.000000 103 103 -2.000000 233 103 -2.000000 104 104 1.000000 110 104 -1.000000 234 104 1.000000 240 104 -1.000000 101 105 -1.000000 108 105 1.000000 231 105 -1.000000 238 105 1.000000 102 106 -1.000000 109 106 1.000000 232 106 -1.000000 239 106 1.000000 104 107 1.000000 110 107 1.000000 234 107 1.000000 240 107 1.000000 101 108 -1.000000 108 108 -1.000000 231 108 -1.000000 238 108 -1.000000 102 109 -1.000000 109 109 -1.000000 232 109 -1.000000 239 109 -1.000000 107 110 1.000000 237 110 1.000000 50 111 -2.000000 185 111 -2.000000 51 112 -2.000000 186 112 -2.000000 48 113 -2.000000 183 113 -2.000000 49 114 1.000000 55 114 -1.000000 184 114 1.000000 190 114 -1.000000 46 115 -1.000000 53 115 1.000000 181 115 -1.000000 188 115 1.000000 47 116 -1.000000 54 116 1.000000 182 116 -1.000000 189 116 1.000000 49 117 1.000000 55 117 1.000000 184 117 1.000000 190 117 1.000000 46 118 -1.000000 53 118 -1.000000 181 118 -1.000000 188 118 -1.000000 47 119 -1.000000 54 119 -1.000000 182 119 -1.000000 189 119 -1.000000 52 120 1.000000 187 120 1.000000 124 121 2.000000 249 121 -2.000000 122 122 -2.000000 247 122 2.000000 123 123 -2.000000 248 123 2.000000 121 124 1.000000 125 124 1.000000 246 124 -1.000000 250 124 -1.000000 121 125 1.000000 125 125 -1.000000 246 125 -1.000000 250 125 1.000000 1 126 1.000000 5 126 -1.000000 126 126 -1.000000 130 126 1.000000 1 127 1.000000 5 127 1.000000 126 127 -1.000000 130 127 -1.000000 3 128 1.000000 128 128 -1.000000 4 129 1.000000 129 129 -1.000000 2 130 1.000000 127 130 -1.000000 64 131 2.000000 199 131 2.000000 62 132 1.000000 69 132 1.000000 197 132 1.000000 204 132 1.000000 63 133 1.000000 70 133 1.000000 198 133 1.000000 205 133 1.000000 61 134 1.000000 67 134 1.000000 196 134 1.000000 202 134 1.000000 62 135 1.000000 69 135 -1.000000 197 135 1.000000 204 135 -1.000000 63 136 1.000000 70 136 -1.000000 198 136 1.000000 205 136 -1.000000 61 137 1.000000 67 137 -1.000000 196 137 1.000000 202 137 -1.000000 68 138 1.000000 203 138 1.000000 65 139 -1.000000 200 139 -1.000000 66 140 -1.000000 201 140 -1.000000 14 141 -2.000000 144 141 -2.000000 12 142 -1.000000 19 142 -1.000000 142 142 -1.000000 149 142 -1.000000 13 143 -1.000000 20 143 -1.000000 143 143 -1.000000 150 143 -1.000000 11 144 -1.000000 17 144 -1.000000 141 144 -1.000000 147 144 -1.000000 12 145 -1.000000 19 145 1.000000 142 145 -1.000000 149 145 1.000000 13 146 -1.000000 20 146 1.000000 143 146 -1.000000 150 146 1.000000 11 147 -1.000000 17 147 1.000000 141 147 -1.000000 147 147 1.000000 18 148 -1.000000 148 148 -1.000000 15 149 1.000000 145 149 1.000000 16 150 1.000000 146 150 1.000000 85 151 -2.000000 220 151 2.000000 86 152 -2.000000 221 152 2.000000 83 153 -2.000000 218 153 2.000000 84 154 1.000000 90 154 -1.000000 219 154 -1.000000 225 154 1.000000 81 155 -1.000000 88 155 1.000000 216 155 1.000000 223 155 -1.000000 82 156 -1.000000 89 156 1.000000 217 156 1.000000 224 156 -1.000000 84 157 1.000000 90 157 1.000000 219 157 -1.000000 225 157 -1.000000 81 158 -1.000000 88 158 -1.000000 216 158 1.000000 223 158 1.000000 82 159 -1.000000 89 159 -1.000000 217 159 1.000000 224 159 1.000000 87 160 1.000000 222 160 -1.000000 29 161 -2.000000 164 161 -2.000000 27 162 -1.000000 34 162 -1.000000 162 162 -1.000000 169 162 -1.000000 28 163 -1.000000 35 163 -1.000000 163 163 -1.000000 170 163 -1.000000 26 164 -1.000000 32 164 -1.000000 161 164 -1.000000 167 164 -1.000000 27 165 -1.000000 34 165 1.000000 162 165 -1.000000 169 165 1.000000 28 166 -1.000000 35 166 1.000000 163 166 -1.000000 170 166 1.000000 26 167 -1.000000 32 167 1.000000 161 167 -1.000000 167 167 1.000000 33 168 -1.000000 168 168 -1.000000 30 169 1.000000 165 169 1.000000 31 170 1.000000 166 170 1.000000 105 171 -2.000000 235 171 2.000000 106 172 -2.000000 236 172 2.000000 103 173 -2.000000 233 173 2.000000 104 174 1.000000 110 174 -1.000000 234 174 -1.000000 240 174 1.000000 101 175 -1.000000 108 175 1.000000 231 175 1.000000 238 175 -1.000000 102 176 -1.000000 109 176 1.000000 232 176 1.000000 239 176 -1.000000 104 177 1.000000 110 177 1.000000 234 177 -1.000000 240 177 -1.000000 101 178 -1.000000 108 178 -1.000000 231 178 1.000000 238 178 1.000000 102 179 -1.000000 109 179 -1.000000 232 179 1.000000 239 179 1.000000 107 180 1.000000 237 180 -1.000000 50 181 -2.000000 185 181 2.000000 51 182 -2.000000 186 182 2.000000 48 183 -2.000000 183 183 2.000000 49 184 1.000000 55 184 -1.000000 184 184 -1.000000 190 184 1.000000 46 185 -1.000000 53 185 1.000000 181 185 1.000000 188 185 -1.000000 47 186 -1.000000 54 186 1.000000 182 186 1.000000 189 186 -1.000000 49 187 1.000000 55 187 1.000000 184 187 -1.000000 190 187 -1.000000 46 188 -1.000000 53 188 -1.000000 181 188 1.000000 188 188 1.000000 47 189 -1.000000 54 189 -1.000000 182 189 1.000000 189 189 1.000000 52 190 1.000000 187 190 -1.000000 124 191 2.000000 249 191 2.000000 122 192 -2.000000 247 192 -2.000000 123 193 -2.000000 248 193 -2.000000 121 194 1.000000 125 194 1.000000 246 194 1.000000 250 194 1.000000 121 195 1.000000 125 195 -1.000000 246 195 1.000000 250 195 -1.000000 134 196 2.000000 132 197 1.000000 139 197 1.000000 133 198 1.000000 140 198 1.000000 131 199 1.000000 137 199 1.000000 132 200 1.000000 139 200 -1.000000 133 201 1.000000 140 201 -1.000000 131 202 1.000000 137 202 -1.000000 138 203 1.000000 135 204 -1.000000 136 205 -1.000000 210 206 -2.000000 211 207 -2.000000 208 208 -2.000000 209 209 1.000000 215 209 -1.000000 206 210 -1.000000 213 210 1.000000 207 211 -1.000000 214 211 1.000000 209 212 1.000000 215 212 1.000000 206 213 -1.000000 213 213 -1.000000 207 214 -1.000000 214 214 -1.000000 212 215 1.000000 155 216 2.000000 156 217 2.000000 153 218 2.000000 154 219 -1.000000 160 219 1.000000 151 220 1.000000 158 220 -1.000000 152 221 1.000000 159 221 -1.000000 154 222 -1.000000 160 222 -1.000000 151 223 1.000000 158 223 1.000000 152 224 1.000000 159 224 1.000000 157 225 -1.000000 229 226 2.000000 227 227 -2.000000 228 228 -2.000000 226 229 1.000000 230 229 1.000000 226 230 1.000000 230 230 -1.000000 175 231 2.000000 176 232 2.000000 173 233 2.000000 174 234 -1.000000 180 234 1.000000 171 235 1.000000 178 235 -1.000000 172 236 1.000000 179 236 -1.000000 174 237 -1.000000 180 237 -1.000000 171 238 1.000000 178 238 1.000000 172 239 1.000000 179 239 1.000000 177 240 -1.000000 244 241 2.000000 242 242 -2.000000 243 243 -2.000000 241 244 1.000000 245 244 1.000000 241 245 1.000000 245 245 -1.000000 194 246 2.000000 192 247 -2.000000 193 248 -2.000000 191 249 1.000000 195 249 1.000000 191 250 1.000000 195 250 -1.000000 251 251 -2.000000 ";
		std::vector<T> gradeVectorComponents = decodeStringToVecOfT<T>(grade5MatrixComponents);
		Eigen::SparseMatrix<T, Eigen::ColMajor> perGradeBasisTransformMatrix		 = Eigen::SparseMatrix<T, Eigen::ColMajor>(252,252);
		perGradeBasisTransformMatrix.reserve(612);
		for(unsigned int i=0;i<612;++i)
			perGradeBasisTransformMatrix.insert((int)gradeVectorComponents[3*i],(int)gradeVectorComponents[(3*i)+1]) = gradeVectorComponents[(3*i)+2];
		return perGradeBasisTransformMatrix;
	}

	/// contains and load the components of the grade 6 direct transformation matrix 
 	template<typename T>
	Eigen::SparseMatrix<T, Eigen::ColMajor>  loadgrade6Matrix() {
		const std::string grade6MatrixComponents = " 0 0 -2.000000 4 0 2.000000 0 1 -2.000000 4 1 -2.000000 2 2 -2.000000 3 3 -2.000000 1 4 -2.000000 73 5 4.000000 71 6 2.000000 78 6 2.000000 72 7 2.000000 79 7 2.000000 70 8 2.000000 76 8 2.000000 71 9 2.000000 78 9 -2.000000 72 10 2.000000 79 10 -2.000000 70 11 2.000000 76 11 -2.000000 77 12 2.000000 74 13 -2.000000 75 14 -2.000000 18 15 -4.000000 16 16 -2.000000 23 16 -2.000000 17 17 -2.000000 24 17 -2.000000 15 18 -2.000000 21 18 -2.000000 16 19 -2.000000 23 19 2.000000 17 20 -2.000000 24 20 2.000000 15 21 -2.000000 21 21 2.000000 22 22 -2.000000 19 23 2.000000 20 24 2.000000 94 25 4.000000 95 26 4.000000 92 27 4.000000 93 28 -2.000000 99 28 2.000000 90 29 2.000000 97 29 -2.000000 91 30 2.000000 98 30 -2.000000 93 31 -2.000000 99 31 -2.000000 90 32 2.000000 97 32 2.000000 91 33 2.000000 98 33 2.000000 96 34 -2.000000 38 35 -4.000000 36 36 -2.000000 43 36 -2.000000 37 37 -2.000000 44 37 -2.000000 35 38 -2.000000 41 38 -2.000000 36 39 -2.000000 43 39 2.000000 37 40 -2.000000 44 40 2.000000 35 41 -2.000000 41 41 2.000000 42 42 -2.000000 39 43 2.000000 40 44 2.000000 109 45 4.000000 110 46 4.000000 107 47 4.000000 108 48 -2.000000 114 48 2.000000 105 49 2.000000 112 49 -2.000000 106 50 2.000000 113 50 -2.000000 108 51 -2.000000 114 51 -2.000000 105 52 2.000000 112 52 2.000000 106 53 2.000000 113 53 2.000000 111 54 -2.000000 59 55 4.000000 60 56 4.000000 57 57 4.000000 58 58 -2.000000 64 58 2.000000 55 59 2.000000 62 59 -2.000000 56 60 2.000000 63 60 -2.000000 58 61 -2.000000 64 61 -2.000000 55 62 2.000000 62 62 2.000000 56 63 2.000000 63 63 2.000000 61 64 -2.000000 123 65 4.000000 121 66 -4.000000 122 67 -4.000000 120 68 2.000000 124 68 2.000000 120 69 2.000000 124 69 -2.000000 8 70 2.000000 129 70 2.000000 6 71 1.000000 13 71 1.000000 127 71 1.000000 134 71 1.000000 7 72 1.000000 14 72 1.000000 128 72 1.000000 135 72 1.000000 5 73 1.000000 11 73 1.000000 126 73 1.000000 132 73 1.000000 6 74 1.000000 13 74 -1.000000 127 74 1.000000 134 74 -1.000000 7 75 1.000000 14 75 -1.000000 128 75 1.000000 135 75 -1.000000 5 76 1.000000 11 76 -1.000000 126 76 1.000000 132 76 -1.000000 12 77 1.000000 133 77 1.000000 9 78 -1.000000 130 78 -1.000000 10 79 -1.000000 131 79 -1.000000 84 80 -2.000000 186 80 2.000000 85 81 -2.000000 187 81 2.000000 82 82 -2.000000 184 82 2.000000 83 83 1.000000 89 83 -1.000000 185 83 -1.000000 191 83 1.000000 80 84 -1.000000 87 84 1.000000 182 84 1.000000 189 84 -1.000000 81 85 -1.000000 88 85 1.000000 183 85 1.000000 190 85 -1.000000 83 86 1.000000 89 86 1.000000 185 86 -1.000000 191 86 -1.000000 80 87 -1.000000 87 87 -1.000000 182 87 1.000000 189 87 1.000000 81 88 -1.000000 88 88 -1.000000 183 88 1.000000 190 88 1.000000 86 89 1.000000 188 89 -1.000000 29 90 2.000000 150 90 -2.000000 30 91 2.000000 151 91 -2.000000 27 92 2.000000 148 92 -2.000000 28 93 -1.000000 34 93 1.000000 149 93 1.000000 155 93 -1.000000 25 94 1.000000 32 94 -1.000000 146 94 -1.000000 153 94 1.000000 26 95 1.000000 33 95 -1.000000 147 95 -1.000000 154 95 1.000000 28 96 -1.000000 34 96 -1.000000 149 96 1.000000 155 96 1.000000 25 97 1.000000 32 97 1.000000 146 97 -1.000000 153 97 -1.000000 26 98 1.000000 33 98 1.000000 147 98 -1.000000 154 98 -1.000000 31 99 -1.000000 152 99 1.000000 103 100 2.000000 200 100 2.000000 101 101 -2.000000 198 101 -2.000000 102 102 -2.000000 199 102 -2.000000 100 103 1.000000 104 103 1.000000 197 103 1.000000 201 103 1.000000 100 104 1.000000 104 104 -1.000000 197 104 1.000000 201 104 -1.000000 49 105 2.000000 165 105 -2.000000 50 106 2.000000 166 106 -2.000000 47 107 2.000000 163 107 -2.000000 48 108 -1.000000 54 108 1.000000 164 108 1.000000 170 108 -1.000000 45 109 1.000000 52 109 -1.000000 161 109 -1.000000 168 109 1.000000 46 110 1.000000 53 110 -1.000000 162 110 -1.000000 169 110 1.000000 48 111 -1.000000 54 111 -1.000000 164 111 1.000000 170 111 1.000000 45 112 1.000000 52 112 1.000000 161 112 -1.000000 168 112 -1.000000 46 113 1.000000 53 113 1.000000 162 113 -1.000000 169 113 -1.000000 51 114 -1.000000 167 114 1.000000 118 115 2.000000 206 115 2.000000 116 116 -2.000000 204 116 -2.000000 117 117 -2.000000 205 117 -2.000000 115 118 1.000000 119 118 1.000000 203 118 1.000000 207 118 1.000000 115 119 1.000000 119 119 -1.000000 203 119 1.000000 207 119 -1.000000 68 120 2.000000 179 120 2.000000 66 121 -2.000000 177 121 -2.000000 67 122 -2.000000 178 122 -2.000000 65 123 1.000000 69 123 1.000000 176 123 1.000000 180 123 1.000000 65 124 1.000000 69 124 -1.000000 176 124 1.000000 180 124 -1.000000 125 125 -2.000000 209 125 2.000000 8 126 2.000000 129 126 -2.000000 6 127 1.000000 13 127 1.000000 127 127 -1.000000 134 127 -1.000000 7 128 1.000000 14 128 1.000000 128 128 -1.000000 135 128 -1.000000 5 129 1.000000 11 129 1.000000 126 129 -1.000000 132 129 -1.000000 6 130 1.000000 13 130 -1.000000 127 130 -1.000000 134 130 1.000000 7 131 1.000000 14 131 -1.000000 128 131 -1.000000 135 131 1.000000 5 132 1.000000 11 132 -1.000000 126 132 -1.000000 132 132 1.000000 12 133 1.000000 133 133 -1.000000 9 134 -1.000000 130 134 1.000000 10 135 -1.000000 131 135 1.000000 84 136 -2.000000 186 136 -2.000000 85 137 -2.000000 187 137 -2.000000 82 138 -2.000000 184 138 -2.000000 83 139 1.000000 89 139 -1.000000 185 139 1.000000 191 139 -1.000000 80 140 -1.000000 87 140 1.000000 182 140 -1.000000 189 140 1.000000 81 141 -1.000000 88 141 1.000000 183 141 -1.000000 190 141 1.000000 83 142 1.000000 89 142 1.000000 185 142 1.000000 191 142 1.000000 80 143 -1.000000 87 143 -1.000000 182 143 -1.000000 189 143 -1.000000 81 144 -1.000000 88 144 -1.000000 183 144 -1.000000 190 144 -1.000000 86 145 1.000000 188 145 1.000000 29 146 2.000000 150 146 2.000000 30 147 2.000000 151 147 2.000000 27 148 2.000000 148 148 2.000000 28 149 -1.000000 34 149 1.000000 149 149 -1.000000 155 149 1.000000 25 150 1.000000 32 150 -1.000000 146 150 1.000000 153 150 -1.000000 26 151 1.000000 33 151 -1.000000 147 151 1.000000 154 151 -1.000000 28 152 -1.000000 34 152 -1.000000 149 152 -1.000000 155 152 -1.000000 25 153 1.000000 32 153 1.000000 146 153 1.000000 153 153 1.000000 26 154 1.000000 33 154 1.000000 147 154 1.000000 154 154 1.000000 31 155 -1.000000 152 155 -1.000000 103 156 2.000000 200 156 -2.000000 101 157 -2.000000 198 157 2.000000 102 158 -2.000000 199 158 2.000000 100 159 1.000000 104 159 1.000000 197 159 -1.000000 201 159 -1.000000 100 160 1.000000 104 160 -1.000000 197 160 -1.000000 201 160 1.000000 49 161 2.000000 165 161 2.000000 50 162 2.000000 166 162 2.000000 47 163 2.000000 163 163 2.000000 48 164 -1.000000 54 164 1.000000 164 164 -1.000000 170 164 1.000000 45 165 1.000000 52 165 -1.000000 161 165 1.000000 168 165 -1.000000 46 166 1.000000 53 166 -1.000000 162 166 1.000000 169 166 -1.000000 48 167 -1.000000 54 167 -1.000000 164 167 -1.000000 170 167 -1.000000 45 168 1.000000 52 168 1.000000 161 168 1.000000 168 168 1.000000 46 169 1.000000 53 169 1.000000 162 169 1.000000 169 169 1.000000 51 170 -1.000000 167 170 -1.000000 118 171 2.000000 206 171 -2.000000 116 172 -2.000000 204 172 2.000000 117 173 -2.000000 205 173 2.000000 115 174 1.000000 119 174 1.000000 203 174 -1.000000 207 174 -1.000000 115 175 1.000000 119 175 -1.000000 203 175 -1.000000 207 175 1.000000 68 176 2.000000 179 176 -2.000000 66 177 -2.000000 177 177 2.000000 67 178 -2.000000 178 178 2.000000 65 179 1.000000 69 179 1.000000 176 179 -1.000000 180 179 -1.000000 65 180 1.000000 69 180 -1.000000 176 180 -1.000000 180 180 1.000000 125 181 -2.000000 209 181 -2.000000 140 182 -2.000000 141 183 -2.000000 138 184 -2.000000 139 185 1.000000 145 185 -1.000000 136 186 -1.000000 143 186 1.000000 137 187 -1.000000 144 187 1.000000 139 188 1.000000 145 188 1.000000 136 189 -1.000000 143 189 -1.000000 137 190 -1.000000 144 190 -1.000000 142 191 1.000000 195 192 2.000000 193 193 -2.000000 194 194 -2.000000 192 195 1.000000 196 195 1.000000 192 196 1.000000 196 196 -1.000000 159 197 -2.000000 157 198 2.000000 158 199 2.000000 156 200 -1.000000 160 200 -1.000000 156 201 -1.000000 160 201 1.000000 202 202 -2.000000 174 203 -2.000000 172 204 2.000000 173 205 2.000000 171 206 -1.000000 175 206 -1.000000 171 207 -1.000000 175 207 1.000000 208 208 -2.000000 181 209 -2.000000 ";
		std::vector<T> gradeVectorComponents = decodeStringToVecOfT<T>(grade6MatrixComponents);
		Eigen::SparseMatrix<T, Eigen::ColMajor> perGradeBasisTransformMatrix		 = Eigen::SparseMatrix<T, Eigen::ColMajor>(210,210);
		perGradeBasisTransformMatrix.reserve(494);
		for(unsigned int i=0;i<494;++i)
			perGradeBasisTransformMatrix.insert((int)gradeVectorComponents[3*i],(int)gradeVectorComponents[(3*i)+1]) = gradeVectorComponents[(3*i)+2];
		return perGradeBasisTransformMatrix;
	}

	/// contains and load the components of the grade 7 direct transformation matrix 
 	template<typename T>
	Eigen::SparseMatrix<T, Eigen::ColMajor>  loadgrade7Matrix() {
		const std::string grade7MatrixComponents = " 3 0 -4.000000 1 1 -2.000000 8 1 -2.000000 2 2 -2.000000 9 2 -2.000000 0 3 -2.000000 6 3 -2.000000 1 4 -2.000000 8 4 2.000000 2 5 -2.000000 9 5 2.000000 0 6 -2.000000 6 6 2.000000 7 7 -2.000000 4 8 2.000000 5 9 2.000000 60 10 -4.000000 61 11 -4.000000 58 12 -4.000000 59 13 2.000000 65 13 -2.000000 56 14 -2.000000 63 14 2.000000 57 15 -2.000000 64 15 2.000000 59 16 2.000000 65 16 2.000000 56 17 -2.000000 63 17 -2.000000 57 18 -2.000000 64 18 -2.000000 62 19 2.000000 24 20 4.000000 25 21 4.000000 22 22 4.000000 23 23 -2.000000 29 23 2.000000 20 24 2.000000 27 24 -2.000000 21 25 2.000000 28 25 -2.000000 23 26 -2.000000 29 26 -2.000000 20 27 2.000000 27 27 2.000000 21 28 2.000000 28 28 2.000000 26 29 -2.000000 74 30 -4.000000 72 31 4.000000 73 32 4.000000 71 33 -2.000000 75 33 -2.000000 71 34 -2.000000 75 34 2.000000 39 35 4.000000 40 36 4.000000 37 37 4.000000 38 38 -2.000000 44 38 2.000000 35 39 2.000000 42 39 -2.000000 36 40 2.000000 43 40 -2.000000 38 41 -2.000000 44 41 -2.000000 35 42 2.000000 42 42 2.000000 36 43 2.000000 43 43 2.000000 41 44 -2.000000 80 45 -4.000000 78 46 4.000000 79 47 4.000000 77 48 -2.000000 81 48 -2.000000 77 49 -2.000000 81 49 2.000000 53 50 -4.000000 51 51 4.000000 52 52 4.000000 50 53 -2.000000 54 53 -2.000000 50 54 -2.000000 54 54 2.000000 83 55 -4.000000 14 56 -2.000000 88 56 -2.000000 15 57 -2.000000 89 57 -2.000000 12 58 -2.000000 86 58 -2.000000 13 59 1.000000 19 59 -1.000000 87 59 1.000000 93 59 -1.000000 10 60 -1.000000 17 60 1.000000 84 60 -1.000000 91 60 1.000000 11 61 -1.000000 18 61 1.000000 85 61 -1.000000 92 61 1.000000 13 62 1.000000 19 62 1.000000 87 62 1.000000 93 62 1.000000 10 63 -1.000000 17 63 -1.000000 84 63 -1.000000 91 63 -1.000000 11 64 -1.000000 18 64 -1.000000 85 64 -1.000000 92 64 -1.000000 16 65 1.000000 90 65 1.000000 69 66 2.000000 115 66 -2.000000 67 67 -2.000000 113 67 2.000000 68 68 -2.000000 114 68 2.000000 66 69 1.000000 70 69 1.000000 112 69 -1.000000 116 69 -1.000000 66 70 1.000000 70 70 -1.000000 112 70 -1.000000 116 70 1.000000 33 71 -2.000000 102 71 2.000000 31 72 2.000000 100 72 -2.000000 32 73 2.000000 101 73 -2.000000 30 74 -1.000000 34 74 -1.000000 99 74 1.000000 103 74 1.000000 30 75 -1.000000 34 75 1.000000 99 75 1.000000 103 75 -1.000000 76 76 -2.000000 118 76 -2.000000 48 77 -2.000000 108 77 2.000000 46 78 2.000000 106 78 -2.000000 47 79 2.000000 107 79 -2.000000 45 80 -1.000000 49 80 -1.000000 105 80 1.000000 109 80 1.000000 45 81 -1.000000 49 81 1.000000 105 81 1.000000 109 81 -1.000000 82 82 -2.000000 119 82 -2.000000 55 83 -2.000000 111 83 -2.000000 14 84 -2.000000 88 84 2.000000 15 85 -2.000000 89 85 2.000000 12 86 -2.000000 86 86 2.000000 13 87 1.000000 19 87 -1.000000 87 87 -1.000000 93 87 1.000000 10 88 -1.000000 17 88 1.000000 84 88 1.000000 91 88 -1.000000 11 89 -1.000000 18 89 1.000000 85 89 1.000000 92 89 -1.000000 13 90 1.000000 19 90 1.000000 87 90 -1.000000 93 90 -1.000000 10 91 -1.000000 17 91 -1.000000 84 91 1.000000 91 91 1.000000 11 92 -1.000000 18 92 -1.000000 85 92 1.000000 92 92 1.000000 16 93 1.000000 90 93 -1.000000 69 94 2.000000 115 94 2.000000 67 95 -2.000000 113 95 -2.000000 68 96 -2.000000 114 96 -2.000000 66 97 1.000000 70 97 1.000000 112 97 1.000000 116 97 1.000000 66 98 1.000000 70 98 -1.000000 112 98 1.000000 116 98 -1.000000 33 99 -2.000000 102 99 -2.000000 31 100 2.000000 100 100 2.000000 32 101 2.000000 101 101 2.000000 30 102 -1.000000 34 102 -1.000000 99 102 -1.000000 103 102 -1.000000 30 103 -1.000000 34 103 1.000000 99 103 -1.000000 103 103 1.000000 76 104 -2.000000 118 104 2.000000 48 105 -2.000000 108 105 -2.000000 46 106 2.000000 106 106 2.000000 47 107 2.000000 107 107 2.000000 45 108 -1.000000 49 108 -1.000000 105 108 -1.000000 109 108 -1.000000 45 109 -1.000000 49 109 1.000000 105 109 -1.000000 109 109 1.000000 82 110 -2.000000 119 110 2.000000 55 111 -2.000000 111 111 2.000000 97 112 2.000000 95 113 -2.000000 96 114 -2.000000 94 115 1.000000 98 115 1.000000 94 116 1.000000 98 116 -1.000000 117 117 -2.000000 104 118 2.000000 110 119 2.000000 ";
		std::vector<T> gradeVectorComponents = decodeStringToVecOfT<T>(grade7MatrixComponents);
		Eigen::SparseMatrix<T, Eigen::ColMajor> perGradeBasisTransformMatrix		 = Eigen::SparseMatrix<T, Eigen::ColMajor>(120,120);
		perGradeBasisTransformMatrix.reserve(256);
		for(unsigned int i=0;i<256;++i)
			perGradeBasisTransformMatrix.insert((int)gradeVectorComponents[3*i],(int)gradeVectorComponents[(3*i)+1]) = gradeVectorComponents[(3*i)+2];
		return perGradeBasisTransformMatrix;
	}

	/// contains and load the components of the grade 8 direct transformation matrix 
 	template<typename T>
	Eigen::SparseMatrix<T, Eigen::ColMajor>  loadgrade8Matrix() {
		const std::string grade8MatrixComponents = " 4 0 4.000000 5 1 4.000000 2 2 4.000000 3 3 -2.000000 9 3 2.000000 0 4 2.000000 7 4 -2.000000 1 5 2.000000 8 5 -2.000000 3 6 -2.000000 9 6 -2.000000 0 7 2.000000 7 7 2.000000 1 8 2.000000 8 8 2.000000 6 9 -2.000000 31 10 4.000000 29 11 -4.000000 30 12 -4.000000 28 13 2.000000 32 13 2.000000 28 14 2.000000 32 14 -2.000000 18 15 -4.000000 16 16 4.000000 17 17 4.000000 15 18 -2.000000 19 18 -2.000000 15 19 -2.000000 19 19 2.000000 34 20 4.000000 24 21 -4.000000 22 22 4.000000 23 23 4.000000 21 24 -2.000000 25 24 -2.000000 21 25 -2.000000 25 25 2.000000 35 26 4.000000 27 27 4.000000 13 28 2.000000 39 28 2.000000 11 29 -2.000000 37 29 -2.000000 12 30 -2.000000 38 30 -2.000000 10 31 1.000000 14 31 1.000000 36 31 1.000000 40 31 1.000000 10 32 1.000000 14 32 -1.000000 36 32 1.000000 40 32 -1.000000 33 33 -2.000000 44 33 2.000000 20 34 2.000000 42 34 -2.000000 26 35 2.000000 43 35 -2.000000 13 36 2.000000 39 36 -2.000000 11 37 -2.000000 37 37 2.000000 12 38 -2.000000 38 38 2.000000 10 39 1.000000 14 39 1.000000 36 39 -1.000000 40 39 -1.000000 10 40 1.000000 14 40 -1.000000 36 40 -1.000000 40 40 1.000000 33 41 -2.000000 44 41 -2.000000 20 42 2.000000 42 42 2.000000 26 43 2.000000 43 43 2.000000 41 44 -2.000000 ";
		std::vector<T> gradeVectorComponents = decodeStringToVecOfT<T>(grade8MatrixComponents);
		Eigen::SparseMatrix<T, Eigen::ColMajor> perGradeBasisTransformMatrix		 = Eigen::SparseMatrix<T, Eigen::ColMajor>(45,45);
		perGradeBasisTransformMatrix.reserve(81);
		for(unsigned int i=0;i<81;++i)
			perGradeBasisTransformMatrix.insert((int)gradeVectorComponents[3*i],(int)gradeVectorComponents[(3*i)+1]) = gradeVectorComponents[(3*i)+2];
		return perGradeBasisTransformMatrix;
	}

	/// contains and load the components of the grade 9 direct transformation matrix 
 	template<typename T>
	Eigen::SparseMatrix<T, Eigen::ColMajor>  loadgrade9Matrix() {
		const std::string grade9MatrixComponents = " 3 0 -4.000000 1 1 4.000000 2 2 4.000000 0 3 -2.000000 4 3 -2.000000 0 4 -2.000000 4 4 2.000000 8 5 -4.000000 6 6 4.000000 7 7 4.000000 5 8 -2.000000 9 8 -2.000000 5 9 -2.000000 9 9 2.000000 ";
		std::vector<T> gradeVectorComponents = decodeStringToVecOfT<T>(grade9MatrixComponents);
		Eigen::SparseMatrix<T, Eigen::ColMajor> perGradeBasisTransformMatrix		 = Eigen::SparseMatrix<T, Eigen::ColMajor>(10,10);
		perGradeBasisTransformMatrix.reserve(14);
		for(unsigned int i=0;i<14;++i)
			perGradeBasisTransformMatrix.insert((int)gradeVectorComponents[3*i],(int)gradeVectorComponents[(3*i)+1]) = gradeVectorComponents[(3*i)+2];
		return perGradeBasisTransformMatrix;
	}

	/// contains and load the components of the grade 10 direct transformation matrix 
 	template<typename T>
	Eigen::SparseMatrix<T, Eigen::ColMajor>  loadgrade10Matrix() {
		const std::string grade10MatrixComponents = " 0 0 4.000000 ";
		std::vector<T> gradeVectorComponents = decodeStringToVecOfT<T>(grade10MatrixComponents);
		Eigen::SparseMatrix<T, Eigen::ColMajor> perGradeBasisTransformMatrix		 = Eigen::SparseMatrix<T, Eigen::ColMajor>(1,1);
		perGradeBasisTransformMatrix.reserve(1);
		perGradeBasisTransformMatrix.insert((int)gradeVectorComponents[0],(int)gradeVectorComponents[1]) = gradeVectorComponents[2];
		return perGradeBasisTransformMatrix;
	}




	/// contains and load the components of the grade 0 inverse transformation matrix 
 	template<typename T>
	Eigen::SparseMatrix<T, Eigen::ColMajor>  loadgrade0InverseMatrix() {
		const std::string grade0MatrixComponents = " 0 0 1.000000 ";
		std::vector<T> gradeVectorComponents = decodeStringToVecOfT<T>(grade0MatrixComponents);
		Eigen::SparseMatrix<T, Eigen::ColMajor> perGradeBasisTransformMatrix		 = Eigen::SparseMatrix<T, Eigen::ColMajor>(1,1);
		perGradeBasisTransformMatrix.reserve(1);
		perGradeBasisTransformMatrix.insert((int)gradeVectorComponents[0],(int)gradeVectorComponents[1]) = gradeVectorComponents[2];
		return perGradeBasisTransformMatrix;
	}

	/// contains and load the components of the grade 1 inverse transformation matrix 
 	template<typename T>
	Eigen::SparseMatrix<T, Eigen::ColMajor>  loadgrade1InverseMatrix() {
		const std::string grade1MatrixComponents = " 0 0 0.500000 1 0 0.500000 4 1 1.000000 2 2 1.000000 3 3 1.000000 0 4 -0.500000 1 4 0.500000 5 5 0.500000 6 5 0.500000 9 6 1.000000 7 7 1.000000 8 8 1.000000 5 9 -0.500000 6 9 0.500000 ";
		std::vector<T> gradeVectorComponents = decodeStringToVecOfT<T>(grade1MatrixComponents);
		Eigen::SparseMatrix<T, Eigen::ColMajor> perGradeBasisTransformMatrix		 = Eigen::SparseMatrix<T, Eigen::ColMajor>(10,10);
		perGradeBasisTransformMatrix.reserve(14);
		for(unsigned int i=0;i<14;++i)
			perGradeBasisTransformMatrix.insert((int)gradeVectorComponents[3*i],(int)gradeVectorComponents[(3*i)+1]) = gradeVectorComponents[(3*i)+2];
		return perGradeBasisTransformMatrix;
	}

	/// contains and load the components of the grade 2 inverse transformation matrix 
 	template<typename T>
	Eigen::SparseMatrix<T, Eigen::ColMajor>  loadgrade2InverseMatrix() {
		const std::string grade2MatrixComponents = " 3 0 0.500000 11 0 0.500000 1 1 0.500000 9 1 0.500000 2 2 0.500000 10 2 0.500000 0 3 0.500000 4 4 0.250000 5 4 0.250000 12 4 0.250000 13 4 0.250000 8 5 0.500000 16 5 0.500000 6 6 0.500000 14 6 0.500000 7 7 0.500000 15 7 0.500000 4 8 -0.250000 5 8 0.250000 12 8 -0.250000 13 8 0.250000 18 9 -1.000000 24 10 -1.000000 3 11 0.500000 11 11 -0.500000 30 12 0.500000 31 12 0.500000 34 13 1.000000 32 14 1.000000 33 15 1.000000 30 16 -0.500000 31 16 0.500000 17 17 1.000000 1 18 0.500000 9 18 -0.500000 19 19 0.500000 20 19 0.500000 23 20 1.000000 21 21 1.000000 22 22 1.000000 19 23 -0.500000 20 23 0.500000 2 24 0.500000 10 24 -0.500000 25 25 0.500000 26 25 0.500000 29 26 1.000000 27 27 1.000000 28 28 1.000000 25 29 -0.500000 26 29 0.500000 4 30 -0.250000 5 30 -0.250000 12 30 0.250000 13 30 0.250000 8 31 -0.500000 16 31 0.500000 6 32 -0.500000 14 32 0.500000 7 33 -0.500000 15 33 0.500000 4 34 0.250000 5 34 -0.250000 12 34 -0.250000 13 34 0.250000 38 35 0.500000 41 35 0.500000 36 36 0.500000 39 36 0.500000 37 37 0.500000 40 37 0.500000 35 38 0.500000 43 39 -1.000000 44 40 -1.000000 38 41 0.500000 41 41 -0.500000 42 42 1.000000 36 43 0.500000 39 43 -0.500000 37 44 0.500000 40 44 -0.500000 ";
		std::vector<T> gradeVectorComponents = decodeStringToVecOfT<T>(grade2MatrixComponents);
		Eigen::SparseMatrix<T, Eigen::ColMajor> perGradeBasisTransformMatrix		 = Eigen::SparseMatrix<T, Eigen::ColMajor>(45,45);
		perGradeBasisTransformMatrix.reserve(81);
		for(unsigned int i=0;i<81;++i)
			perGradeBasisTransformMatrix.insert((int)gradeVectorComponents[3*i],(int)gradeVectorComponents[(3*i)+1]) = gradeVectorComponents[(3*i)+2];
		return perGradeBasisTransformMatrix;
	}

	/// contains and load the components of the grade 3 inverse transformation matrix 
 	template<typename T>
	Eigen::SparseMatrix<T, Eigen::ColMajor>  loadgrade3InverseMatrix() {
		const std::string grade3MatrixComponents = " 9 0 -0.500000 37 0 -0.500000 15 1 -0.500000 43 1 -0.500000 2 2 -0.500000 21 3 0.250000 22 3 0.250000 49 3 0.250000 50 3 0.250000 25 4 0.500000 53 4 0.500000 23 5 0.500000 51 5 0.500000 24 6 0.500000 52 6 0.500000 21 7 -0.250000 22 7 0.250000 49 7 -0.250000 50 7 0.250000 8 8 0.500000 36 8 0.500000 0 9 -0.500000 10 10 0.250000 11 10 0.250000 38 10 0.250000 39 10 0.250000 14 11 0.500000 42 11 0.500000 12 12 0.500000 40 12 0.500000 13 13 0.500000 41 13 0.500000 10 14 -0.250000 11 14 0.250000 38 14 -0.250000 39 14 0.250000 1 15 -0.500000 16 16 0.250000 17 16 0.250000 44 16 0.250000 45 16 0.250000 20 17 0.500000 48 17 0.500000 18 18 0.500000 46 18 0.500000 19 19 0.500000 47 19 0.500000 16 20 -0.250000 17 20 0.250000 44 20 -0.250000 45 20 0.250000 3 21 0.250000 4 21 0.250000 7 22 0.500000 5 23 0.500000 6 24 0.500000 3 25 -0.250000 4 25 0.250000 29 26 0.250000 32 26 0.250000 57 26 0.250000 60 26 0.250000 27 27 0.250000 30 27 0.250000 55 27 0.250000 58 27 0.250000 28 28 0.250000 31 28 0.250000 56 28 0.250000 59 28 0.250000 26 29 0.250000 54 29 0.250000 34 30 -0.500000 62 30 -0.500000 35 31 -0.500000 63 31 -0.500000 29 32 0.250000 32 32 -0.250000 57 32 0.250000 60 32 -0.250000 33 33 0.500000 61 33 0.500000 27 34 0.250000 30 34 -0.250000 55 34 0.250000 58 34 -0.250000 28 35 0.250000 31 35 -0.250000 56 35 0.250000 59 35 -0.250000 64 36 1.000000 9 37 0.500000 37 37 -0.500000 70 38 -0.500000 71 38 -0.500000 74 39 -1.000000 72 40 -1.000000 73 41 -1.000000 70 42 0.500000 71 42 -0.500000 15 43 0.500000 43 43 -0.500000 85 44 -0.500000 86 44 -0.500000 89 45 -1.000000 87 46 -1.000000 88 47 -1.000000 85 48 0.500000 86 48 -0.500000 21 49 0.250000 22 49 0.250000 49 49 -0.250000 50 49 -0.250000 25 50 0.500000 53 50 -0.500000 23 51 0.500000 51 51 -0.500000 24 52 0.500000 52 52 -0.500000 21 53 -0.250000 22 53 0.250000 49 53 0.250000 50 53 -0.250000 103 54 0.500000 106 54 0.500000 101 55 0.500000 104 55 0.500000 102 56 0.500000 105 56 0.500000 100 57 0.500000 108 58 -1.000000 109 59 -1.000000 103 60 0.500000 106 60 -0.500000 107 61 1.000000 101 62 0.500000 104 62 -0.500000 102 63 0.500000 105 63 -0.500000 8 64 -0.500000 36 64 0.500000 65 65 0.500000 66 65 0.500000 69 66 1.000000 67 67 1.000000 68 68 1.000000 65 69 -0.500000 66 69 0.500000 10 70 0.250000 11 70 0.250000 38 70 -0.250000 39 70 -0.250000 14 71 0.500000 42 71 -0.500000 12 72 0.500000 40 72 -0.500000 13 73 0.500000 41 73 -0.500000 10 74 -0.250000 11 74 0.250000 38 74 0.250000 39 74 -0.250000 78 75 0.500000 81 75 0.500000 76 76 0.500000 79 76 0.500000 77 77 0.500000 80 77 0.500000 75 78 0.500000 83 79 -1.000000 84 80 -1.000000 78 81 0.500000 81 81 -0.500000 82 82 1.000000 76 83 0.500000 79 83 -0.500000 77 84 0.500000 80 84 -0.500000 16 85 0.250000 17 85 0.250000 44 85 -0.250000 45 85 -0.250000 20 86 0.500000 48 86 -0.500000 18 87 0.500000 46 87 -0.500000 19 88 0.500000 47 88 -0.500000 16 89 -0.250000 17 89 0.250000 44 89 0.250000 45 89 -0.250000 93 90 0.500000 96 90 0.500000 91 91 0.500000 94 91 0.500000 92 92 0.500000 95 92 0.500000 90 93 0.500000 98 94 -1.000000 99 95 -1.000000 93 96 0.500000 96 96 -0.500000 97 97 1.000000 91 98 0.500000 94 98 -0.500000 92 99 0.500000 95 99 -0.500000 29 100 -0.250000 32 100 -0.250000 57 100 0.250000 60 100 0.250000 27 101 -0.250000 30 101 -0.250000 55 101 0.250000 58 101 0.250000 28 102 -0.250000 31 102 -0.250000 56 102 0.250000 59 102 0.250000 26 103 -0.250000 54 103 0.250000 34 104 0.500000 62 104 -0.500000 35 105 0.500000 63 105 -0.500000 29 106 -0.250000 32 106 0.250000 57 106 0.250000 60 106 -0.250000 33 107 -0.500000 61 107 0.500000 27 108 -0.250000 30 108 0.250000 55 108 0.250000 58 108 -0.250000 28 109 -0.250000 31 109 0.250000 56 109 0.250000 59 109 -0.250000 114 110 -0.500000 117 110 -0.500000 115 111 -0.500000 118 111 -0.500000 112 112 -0.500000 113 113 0.500000 116 113 0.500000 110 114 -0.500000 111 115 -0.500000 119 116 1.000000 114 117 0.500000 117 117 -0.500000 115 118 0.500000 118 118 -0.500000 113 119 -0.500000 116 119 0.500000 ";
		std::vector<T> gradeVectorComponents = decodeStringToVecOfT<T>(grade3MatrixComponents);
		Eigen::SparseMatrix<T, Eigen::ColMajor> perGradeBasisTransformMatrix		 = Eigen::SparseMatrix<T, Eigen::ColMajor>(120,120);
		perGradeBasisTransformMatrix.reserve(256);
		for(unsigned int i=0;i<256;++i)
			perGradeBasisTransformMatrix.insert((int)gradeVectorComponents[3*i],(int)gradeVectorComponents[(3*i)+1]) = gradeVectorComponents[(3*i)+2];
		return perGradeBasisTransformMatrix;
	}

	/// contains and load the components of the grade 4 inverse transformation matrix 
 	template<typename T>
	Eigen::SparseMatrix<T, Eigen::ColMajor>  loadgrade4InverseMatrix() {
		const std::string grade4MatrixComponents = " 28 0 0.500000 84 0 0.500000 1 1 -0.500000 34 2 -0.250000 35 2 -0.250000 90 2 -0.250000 91 2 -0.250000 38 3 -0.500000 94 3 -0.500000 36 4 -0.500000 92 4 -0.500000 37 5 -0.500000 93 5 -0.500000 34 6 0.250000 35 6 -0.250000 90 6 0.250000 91 6 -0.250000 7 7 -0.500000 49 8 -0.250000 50 8 -0.250000 105 8 -0.250000 106 8 -0.250000 53 9 -0.500000 109 9 -0.500000 51 10 -0.500000 107 10 -0.500000 52 11 -0.500000 108 11 -0.500000 49 12 0.250000 50 12 -0.250000 105 12 0.250000 106 12 -0.250000 13 13 -0.250000 14 13 -0.250000 17 14 -0.500000 15 15 -0.500000 16 16 -0.500000 13 17 0.250000 14 17 -0.250000 67 18 0.250000 70 18 0.250000 123 18 0.250000 126 18 0.250000 65 19 0.250000 68 19 0.250000 121 19 0.250000 124 19 0.250000 66 20 0.250000 69 20 0.250000 122 20 0.250000 125 20 0.250000 64 21 0.250000 120 21 0.250000 72 22 -0.500000 128 22 -0.500000 73 23 -0.500000 129 23 -0.500000 67 24 0.250000 70 24 -0.250000 123 24 0.250000 126 24 -0.250000 71 25 0.500000 127 25 0.500000 65 26 0.250000 68 26 -0.250000 121 26 0.250000 124 26 -0.250000 66 27 0.250000 69 27 -0.250000 122 27 0.250000 125 27 -0.250000 0 28 0.500000 29 29 0.250000 30 29 0.250000 85 29 0.250000 86 29 0.250000 33 30 0.500000 89 30 0.500000 31 31 0.500000 87 31 0.500000 32 32 0.500000 88 32 0.500000 29 33 -0.250000 30 33 0.250000 85 33 -0.250000 86 33 0.250000 2 34 -0.250000 3 34 -0.250000 6 35 -0.500000 4 36 -0.500000 5 37 -0.500000 2 38 0.250000 3 38 -0.250000 42 39 0.250000 45 39 0.250000 98 39 0.250000 101 39 0.250000 40 40 0.250000 43 40 0.250000 96 40 0.250000 99 40 0.250000 41 41 0.250000 44 41 0.250000 97 41 0.250000 100 41 0.250000 39 42 0.250000 95 42 0.250000 47 43 -0.500000 103 43 -0.500000 48 44 -0.500000 104 44 -0.500000 42 45 0.250000 45 45 -0.250000 98 45 0.250000 101 45 -0.250000 46 46 0.500000 102 46 0.500000 40 47 0.250000 43 47 -0.250000 96 47 0.250000 99 47 -0.250000 41 48 0.250000 44 48 -0.250000 97 48 0.250000 100 48 -0.250000 8 49 -0.250000 9 49 -0.250000 12 50 -0.500000 10 51 -0.500000 11 52 -0.500000 8 53 0.250000 9 53 -0.250000 57 54 0.250000 60 54 0.250000 113 54 0.250000 116 54 0.250000 55 55 0.250000 58 55 0.250000 111 55 0.250000 114 55 0.250000 56 56 0.250000 59 56 0.250000 112 56 0.250000 115 56 0.250000 54 57 0.250000 110 57 0.250000 62 58 -0.500000 118 58 -0.500000 63 59 -0.500000 119 59 -0.500000 57 60 0.250000 60 60 -0.250000 113 60 0.250000 116 60 -0.250000 61 61 0.500000 117 61 0.500000 55 62 0.250000 58 62 -0.250000 111 62 0.250000 114 62 -0.250000 56 63 0.250000 59 63 -0.250000 112 63 0.250000 115 63 -0.250000 21 64 0.250000 24 64 0.250000 19 65 0.250000 22 65 0.250000 20 66 0.250000 23 66 0.250000 18 67 0.250000 26 68 -0.500000 27 69 -0.500000 21 70 0.250000 24 70 -0.250000 25 71 0.500000 19 72 0.250000 22 72 -0.250000 20 73 0.250000 23 73 -0.250000 78 74 -0.250000 81 74 -0.250000 134 74 -0.250000 137 74 -0.250000 79 75 -0.250000 82 75 -0.250000 135 75 -0.250000 138 75 -0.250000 76 76 -0.250000 132 76 -0.250000 77 77 0.250000 80 77 0.250000 133 77 0.250000 136 77 0.250000 74 78 -0.250000 130 78 -0.250000 75 79 -0.250000 131 79 -0.250000 83 80 0.500000 139 80 0.500000 78 81 0.250000 81 81 -0.250000 134 81 0.250000 137 81 -0.250000 79 82 0.250000 82 82 -0.250000 135 82 0.250000 138 82 -0.250000 77 83 -0.250000 80 83 0.250000 133 83 -0.250000 136 83 0.250000 28 84 0.500000 84 84 -0.500000 140 85 0.500000 141 85 0.500000 144 86 1.000000 142 87 1.000000 143 88 1.000000 140 89 -0.500000 141 89 0.500000 34 90 0.250000 35 90 0.250000 90 90 -0.250000 91 90 -0.250000 38 91 0.500000 94 91 -0.500000 36 92 0.500000 92 92 -0.500000 37 93 0.500000 93 93 -0.500000 34 94 -0.250000 35 94 0.250000 90 94 0.250000 91 94 -0.250000 158 95 -0.500000 161 95 -0.500000 156 96 -0.500000 159 96 -0.500000 157 97 -0.500000 160 97 -0.500000 155 98 -0.500000 163 99 1.000000 164 100 1.000000 158 101 -0.500000 161 101 0.500000 162 102 -1.000000 156 103 -0.500000 159 103 0.500000 157 104 -0.500000 160 104 0.500000 49 105 0.250000 50 105 0.250000 105 105 -0.250000 106 105 -0.250000 53 106 0.500000 109 106 -0.500000 51 107 0.500000 107 107 -0.500000 52 108 0.500000 108 108 -0.500000 49 109 -0.250000 50 109 0.250000 105 109 0.250000 106 109 -0.250000 178 110 -0.500000 181 110 -0.500000 176 111 -0.500000 179 111 -0.500000 177 112 -0.500000 180 112 -0.500000 175 113 -0.500000 183 114 1.000000 184 115 1.000000 178 116 -0.500000 181 116 0.500000 182 117 -1.000000 176 118 -0.500000 179 118 0.500000 177 119 -0.500000 180 119 0.500000 67 120 0.250000 70 120 0.250000 123 120 -0.250000 126 120 -0.250000 65 121 0.250000 68 121 0.250000 121 121 -0.250000 124 121 -0.250000 66 122 0.250000 69 122 0.250000 122 122 -0.250000 125 122 -0.250000 64 123 0.250000 120 123 -0.250000 72 124 -0.500000 128 124 0.500000 73 125 -0.500000 129 125 0.500000 67 126 0.250000 70 126 -0.250000 123 126 -0.250000 126 126 0.250000 71 127 0.500000 127 127 -0.500000 65 128 0.250000 68 128 -0.250000 121 128 -0.250000 124 128 0.250000 66 129 0.250000 69 129 -0.250000 122 129 -0.250000 125 129 0.250000 199 130 -0.500000 202 130 -0.500000 200 131 -0.500000 203 131 -0.500000 197 132 -0.500000 198 133 0.500000 201 133 0.500000 195 134 -0.500000 196 135 -0.500000 204 136 1.000000 199 137 0.500000 202 137 -0.500000 200 138 0.500000 203 138 -0.500000 198 139 -0.500000 201 139 0.500000 29 140 -0.250000 30 140 -0.250000 85 140 0.250000 86 140 0.250000 33 141 -0.500000 89 141 0.500000 31 142 -0.500000 87 142 0.500000 32 143 -0.500000 88 143 0.500000 29 144 0.250000 30 144 -0.250000 85 144 -0.250000 86 144 0.250000 148 145 0.500000 151 145 0.500000 146 146 0.500000 149 146 0.500000 147 147 0.500000 150 147 0.500000 145 148 0.500000 153 149 -1.000000 154 150 -1.000000 148 151 0.500000 151 151 -0.500000 152 152 1.000000 146 153 0.500000 149 153 -0.500000 147 154 0.500000 150 154 -0.500000 42 155 0.250000 45 155 0.250000 98 155 -0.250000 101 155 -0.250000 40 156 0.250000 43 156 0.250000 96 156 -0.250000 99 156 -0.250000 41 157 0.250000 44 157 0.250000 97 157 -0.250000 100 157 -0.250000 39 158 0.250000 95 158 -0.250000 47 159 -0.500000 103 159 0.500000 48 160 -0.500000 104 160 0.500000 42 161 0.250000 45 161 -0.250000 98 161 -0.250000 101 161 0.250000 46 162 0.500000 102 162 -0.500000 40 163 0.250000 43 163 -0.250000 96 163 -0.250000 99 163 0.250000 41 164 0.250000 44 164 -0.250000 97 164 -0.250000 100 164 0.250000 169 165 -0.500000 172 165 -0.500000 170 166 -0.500000 173 166 -0.500000 167 167 -0.500000 168 168 0.500000 171 168 0.500000 165 169 -0.500000 166 170 -0.500000 174 171 1.000000 169 172 0.500000 172 172 -0.500000 170 173 0.500000 173 173 -0.500000 168 174 -0.500000 171 174 0.500000 57 175 0.250000 60 175 0.250000 113 175 -0.250000 116 175 -0.250000 55 176 0.250000 58 176 0.250000 111 176 -0.250000 114 176 -0.250000 56 177 0.250000 59 177 0.250000 112 177 -0.250000 115 177 -0.250000 54 178 0.250000 110 178 -0.250000 62 179 -0.500000 118 179 0.500000 63 180 -0.500000 119 180 0.500000 57 181 0.250000 60 181 -0.250000 113 181 -0.250000 116 181 0.250000 61 182 0.500000 117 182 -0.500000 55 183 0.250000 58 183 -0.250000 111 183 -0.250000 114 183 0.250000 56 184 0.250000 59 184 -0.250000 112 184 -0.250000 115 184 0.250000 189 185 -0.500000 192 185 -0.500000 190 186 -0.500000 193 186 -0.500000 187 187 -0.500000 188 188 0.500000 191 188 0.500000 185 189 -0.500000 186 190 -0.500000 194 191 1.000000 189 192 0.500000 192 192 -0.500000 190 193 0.500000 193 193 -0.500000 188 194 -0.500000 191 194 0.500000 78 195 0.250000 81 195 0.250000 134 195 -0.250000 137 195 -0.250000 79 196 0.250000 82 196 0.250000 135 196 -0.250000 138 196 -0.250000 76 197 0.250000 132 197 -0.250000 77 198 -0.250000 80 198 -0.250000 133 198 0.250000 136 198 0.250000 74 199 0.250000 130 199 -0.250000 75 200 0.250000 131 200 -0.250000 83 201 -0.500000 139 201 0.500000 78 202 -0.250000 81 202 0.250000 134 202 0.250000 137 202 -0.250000 79 203 -0.250000 82 203 0.250000 135 203 0.250000 138 203 -0.250000 77 204 0.250000 80 204 -0.250000 133 204 -0.250000 136 204 0.250000 208 205 0.500000 209 205 0.500000 206 206 -0.500000 207 207 -0.500000 205 208 0.500000 208 209 0.500000 209 209 -0.500000 ";
		std::vector<T> gradeVectorComponents = decodeStringToVecOfT<T>(grade4MatrixComponents);
		Eigen::SparseMatrix<T, Eigen::ColMajor> perGradeBasisTransformMatrix		 = Eigen::SparseMatrix<T, Eigen::ColMajor>(210,210);
		perGradeBasisTransformMatrix.reserve(494);
		for(unsigned int i=0;i<494;++i)
			perGradeBasisTransformMatrix.insert((int)gradeVectorComponents[3*i],(int)gradeVectorComponents[(3*i)+1]) = gradeVectorComponents[(3*i)+2];
		return perGradeBasisTransformMatrix;
	}

	/// contains and load the components of the grade 5 inverse transformation matrix 
 	template<typename T>
	Eigen::SparseMatrix<T, Eigen::ColMajor>  loadgrade5InverseMatrix() {
		const std::string grade5MatrixComponents = " 0 0 -0.500000 56 1 0.250000 57 1 0.250000 126 1 0.250000 127 1 0.250000 60 2 0.500000 130 2 0.500000 58 3 0.500000 128 3 0.500000 59 4 0.500000 129 4 0.500000 56 5 -0.250000 57 5 0.250000 126 5 -0.250000 127 5 0.250000 6 6 -0.250000 7 6 -0.250000 10 7 -0.500000 8 8 -0.500000 9 9 -0.500000 6 10 0.250000 7 10 -0.250000 74 11 -0.250000 77 11 -0.250000 144 11 -0.250000 147 11 -0.250000 72 12 -0.250000 75 12 -0.250000 142 12 -0.250000 145 12 -0.250000 73 13 -0.250000 76 13 -0.250000 143 13 -0.250000 146 13 -0.250000 71 14 -0.250000 141 14 -0.250000 79 15 0.500000 149 15 0.500000 80 16 0.500000 150 16 0.500000 74 17 -0.250000 77 17 0.250000 144 17 -0.250000 147 17 0.250000 78 18 -0.500000 148 18 -0.500000 72 19 -0.250000 75 19 0.250000 142 19 -0.250000 145 19 0.250000 73 20 -0.250000 76 20 0.250000 143 20 -0.250000 146 20 0.250000 21 21 -0.250000 22 21 -0.250000 25 22 -0.500000 23 23 -0.500000 24 24 -0.500000 21 25 0.250000 22 25 -0.250000 94 26 -0.250000 97 26 -0.250000 164 26 -0.250000 167 26 -0.250000 92 27 -0.250000 95 27 -0.250000 162 27 -0.250000 165 27 -0.250000 93 28 -0.250000 96 28 -0.250000 163 28 -0.250000 166 28 -0.250000 91 29 -0.250000 161 29 -0.250000 99 30 0.500000 169 30 0.500000 100 31 0.500000 170 31 0.500000 94 32 -0.250000 97 32 0.250000 164 32 -0.250000 167 32 0.250000 98 33 -0.500000 168 33 -0.500000 92 34 -0.250000 95 34 0.250000 162 34 -0.250000 165 34 0.250000 93 35 -0.250000 96 35 0.250000 163 35 -0.250000 166 35 0.250000 39 36 -0.250000 42 36 -0.250000 37 37 -0.250000 40 37 -0.250000 38 38 -0.250000 41 38 -0.250000 36 39 -0.250000 44 40 0.500000 45 41 0.500000 39 42 -0.250000 42 42 0.250000 43 43 -0.500000 37 44 -0.250000 40 44 0.250000 38 45 -0.250000 41 45 0.250000 115 46 -0.250000 118 46 -0.250000 185 46 -0.250000 188 46 -0.250000 116 47 -0.250000 119 47 -0.250000 186 47 -0.250000 189 47 -0.250000 113 48 -0.250000 183 48 -0.250000 114 49 0.250000 117 49 0.250000 184 49 0.250000 187 49 0.250000 111 50 -0.250000 181 50 -0.250000 112 51 -0.250000 182 51 -0.250000 120 52 0.500000 190 52 0.500000 115 53 0.250000 118 53 -0.250000 185 53 0.250000 188 53 -0.250000 116 54 0.250000 119 54 -0.250000 186 54 0.250000 189 54 -0.250000 114 55 -0.250000 117 55 0.250000 184 55 -0.250000 187 55 0.250000 1 56 0.250000 2 56 0.250000 5 57 0.500000 3 58 0.500000 4 59 0.500000 1 60 -0.250000 2 60 0.250000 64 61 0.250000 67 61 0.250000 134 61 0.250000 137 61 0.250000 62 62 0.250000 65 62 0.250000 132 62 0.250000 135 62 0.250000 63 63 0.250000 66 63 0.250000 133 63 0.250000 136 63 0.250000 61 64 0.250000 131 64 0.250000 69 65 -0.500000 139 65 -0.500000 70 66 -0.500000 140 66 -0.500000 64 67 0.250000 67 67 -0.250000 134 67 0.250000 137 67 -0.250000 68 68 0.500000 138 68 0.500000 62 69 0.250000 65 69 -0.250000 132 69 0.250000 135 69 -0.250000 63 70 0.250000 66 70 -0.250000 133 70 0.250000 136 70 -0.250000 14 71 -0.250000 17 71 -0.250000 12 72 -0.250000 15 72 -0.250000 13 73 -0.250000 16 73 -0.250000 11 74 -0.250000 19 75 0.500000 20 76 0.500000 14 77 -0.250000 17 77 0.250000 18 78 -0.500000 12 79 -0.250000 15 79 0.250000 13 80 -0.250000 16 80 0.250000 85 81 -0.250000 88 81 -0.250000 155 81 -0.250000 158 81 -0.250000 86 82 -0.250000 89 82 -0.250000 156 82 -0.250000 159 82 -0.250000 83 83 -0.250000 153 83 -0.250000 84 84 0.250000 87 84 0.250000 154 84 0.250000 157 84 0.250000 81 85 -0.250000 151 85 -0.250000 82 86 -0.250000 152 86 -0.250000 90 87 0.500000 160 87 0.500000 85 88 0.250000 88 88 -0.250000 155 88 0.250000 158 88 -0.250000 86 89 0.250000 89 89 -0.250000 156 89 0.250000 159 89 -0.250000 84 90 -0.250000 87 90 0.250000 154 90 -0.250000 157 90 0.250000 29 91 -0.250000 32 91 -0.250000 27 92 -0.250000 30 92 -0.250000 28 93 -0.250000 31 93 -0.250000 26 94 -0.250000 34 95 0.500000 35 96 0.500000 29 97 -0.250000 32 97 0.250000 33 98 -0.500000 27 99 -0.250000 30 99 0.250000 28 100 -0.250000 31 100 0.250000 105 101 -0.250000 108 101 -0.250000 175 101 -0.250000 178 101 -0.250000 106 102 -0.250000 109 102 -0.250000 176 102 -0.250000 179 102 -0.250000 103 103 -0.250000 173 103 -0.250000 104 104 0.250000 107 104 0.250000 174 104 0.250000 177 104 0.250000 101 105 -0.250000 171 105 -0.250000 102 106 -0.250000 172 106 -0.250000 110 107 0.500000 180 107 0.500000 105 108 0.250000 108 108 -0.250000 175 108 0.250000 178 108 -0.250000 106 109 0.250000 109 109 -0.250000 176 109 0.250000 179 109 -0.250000 104 110 -0.250000 107 110 0.250000 174 110 -0.250000 177 110 0.250000 50 111 -0.250000 53 111 -0.250000 51 112 -0.250000 54 112 -0.250000 48 113 -0.250000 49 114 0.250000 52 114 0.250000 46 115 -0.250000 47 116 -0.250000 55 117 0.500000 50 118 0.250000 53 118 -0.250000 51 119 0.250000 54 119 -0.250000 49 120 -0.250000 52 120 0.250000 124 121 0.250000 125 121 0.250000 194 121 0.250000 195 121 0.250000 122 122 -0.250000 192 122 -0.250000 123 123 -0.250000 193 123 -0.250000 121 124 0.250000 191 124 0.250000 124 125 0.250000 125 125 -0.250000 194 125 0.250000 195 125 -0.250000 56 126 0.250000 57 126 0.250000 126 126 -0.250000 127 126 -0.250000 60 127 0.500000 130 127 -0.500000 58 128 0.500000 128 128 -0.500000 59 129 0.500000 129 129 -0.500000 56 130 -0.250000 57 130 0.250000 126 130 0.250000 127 130 -0.250000 199 131 0.500000 202 131 0.500000 197 132 0.500000 200 132 0.500000 198 133 0.500000 201 133 0.500000 196 134 0.500000 204 135 -1.000000 205 136 -1.000000 199 137 0.500000 202 137 -0.500000 203 138 1.000000 197 139 0.500000 200 139 -0.500000 198 140 0.500000 201 140 -0.500000 74 141 0.250000 77 141 0.250000 144 141 -0.250000 147 141 -0.250000 72 142 0.250000 75 142 0.250000 142 142 -0.250000 145 142 -0.250000 73 143 0.250000 76 143 0.250000 143 143 -0.250000 146 143 -0.250000 71 144 0.250000 141 144 -0.250000 79 145 -0.500000 149 145 0.500000 80 146 -0.500000 150 146 0.500000 74 147 0.250000 77 147 -0.250000 144 147 -0.250000 147 147 0.250000 78 148 0.500000 148 148 -0.500000 72 149 0.250000 75 149 -0.250000 142 149 -0.250000 145 149 0.250000 73 150 0.250000 76 150 -0.250000 143 150 -0.250000 146 150 0.250000 220 151 0.500000 223 151 0.500000 221 152 0.500000 224 152 0.500000 218 153 0.500000 219 154 -0.500000 222 154 -0.500000 216 155 0.500000 217 156 0.500000 225 157 -1.000000 220 158 -0.500000 223 158 0.500000 221 159 -0.500000 224 159 0.500000 219 160 0.500000 222 160 -0.500000 94 161 0.250000 97 161 0.250000 164 161 -0.250000 167 161 -0.250000 92 162 0.250000 95 162 0.250000 162 162 -0.250000 165 162 -0.250000 93 163 0.250000 96 163 0.250000 163 163 -0.250000 166 163 -0.250000 91 164 0.250000 161 164 -0.250000 99 165 -0.500000 169 165 0.500000 100 166 -0.500000 170 166 0.500000 94 167 0.250000 97 167 -0.250000 164 167 -0.250000 167 167 0.250000 98 168 0.500000 168 168 -0.500000 92 169 0.250000 95 169 -0.250000 162 169 -0.250000 165 169 0.250000 93 170 0.250000 96 170 -0.250000 163 170 -0.250000 166 170 0.250000 235 171 0.500000 238 171 0.500000 236 172 0.500000 239 172 0.500000 233 173 0.500000 234 174 -0.500000 237 174 -0.500000 231 175 0.500000 232 176 0.500000 240 177 -1.000000 235 178 -0.500000 238 178 0.500000 236 179 -0.500000 239 179 0.500000 234 180 0.500000 237 180 -0.500000 115 181 -0.250000 118 181 -0.250000 185 181 0.250000 188 181 0.250000 116 182 -0.250000 119 182 -0.250000 186 182 0.250000 189 182 0.250000 113 183 -0.250000 183 183 0.250000 114 184 0.250000 117 184 0.250000 184 184 -0.250000 187 184 -0.250000 111 185 -0.250000 181 185 0.250000 112 186 -0.250000 182 186 0.250000 120 187 0.500000 190 187 -0.500000 115 188 0.250000 118 188 -0.250000 185 188 -0.250000 188 188 0.250000 116 189 0.250000 119 189 -0.250000 186 189 -0.250000 189 189 0.250000 114 190 -0.250000 117 190 0.250000 184 190 0.250000 187 190 -0.250000 249 191 0.500000 250 191 0.500000 247 192 -0.500000 248 193 -0.500000 246 194 0.500000 249 195 0.500000 250 195 -0.500000 64 196 -0.250000 67 196 -0.250000 134 196 0.250000 137 196 0.250000 62 197 -0.250000 65 197 -0.250000 132 197 0.250000 135 197 0.250000 63 198 -0.250000 66 198 -0.250000 133 198 0.250000 136 198 0.250000 61 199 -0.250000 131 199 0.250000 69 200 0.500000 139 200 -0.500000 70 201 0.500000 140 201 -0.500000 64 202 -0.250000 67 202 0.250000 134 202 0.250000 137 202 -0.250000 68 203 -0.500000 138 203 0.500000 62 204 -0.250000 65 204 0.250000 132 204 0.250000 135 204 -0.250000 63 205 -0.250000 66 205 0.250000 133 205 0.250000 136 205 -0.250000 210 206 -0.500000 213 206 -0.500000 211 207 -0.500000 214 207 -0.500000 208 208 -0.500000 209 209 0.500000 212 209 0.500000 206 210 -0.500000 207 211 -0.500000 215 212 1.000000 210 213 0.500000 213 213 -0.500000 211 214 0.500000 214 214 -0.500000 209 215 -0.500000 212 215 0.500000 85 216 -0.250000 88 216 -0.250000 155 216 0.250000 158 216 0.250000 86 217 -0.250000 89 217 -0.250000 156 217 0.250000 159 217 0.250000 83 218 -0.250000 153 218 0.250000 84 219 0.250000 87 219 0.250000 154 219 -0.250000 157 219 -0.250000 81 220 -0.250000 151 220 0.250000 82 221 -0.250000 152 221 0.250000 90 222 0.500000 160 222 -0.500000 85 223 0.250000 88 223 -0.250000 155 223 -0.250000 158 223 0.250000 86 224 0.250000 89 224 -0.250000 156 224 -0.250000 159 224 0.250000 84 225 -0.250000 87 225 0.250000 154 225 0.250000 157 225 -0.250000 229 226 0.500000 230 226 0.500000 227 227 -0.500000 228 228 -0.500000 226 229 0.500000 229 230 0.500000 230 230 -0.500000 105 231 -0.250000 108 231 -0.250000 175 231 0.250000 178 231 0.250000 106 232 -0.250000 109 232 -0.250000 176 232 0.250000 179 232 0.250000 103 233 -0.250000 173 233 0.250000 104 234 0.250000 107 234 0.250000 174 234 -0.250000 177 234 -0.250000 101 235 -0.250000 171 235 0.250000 102 236 -0.250000 172 236 0.250000 110 237 0.500000 180 237 -0.500000 105 238 0.250000 108 238 -0.250000 175 238 -0.250000 178 238 0.250000 106 239 0.250000 109 239 -0.250000 176 239 -0.250000 179 239 0.250000 104 240 -0.250000 107 240 0.250000 174 240 0.250000 177 240 -0.250000 244 241 0.500000 245 241 0.500000 242 242 -0.500000 243 243 -0.500000 241 244 0.500000 244 245 0.500000 245 245 -0.500000 124 246 -0.250000 125 246 -0.250000 194 246 0.250000 195 246 0.250000 122 247 0.250000 192 247 -0.250000 123 248 0.250000 193 248 -0.250000 121 249 -0.250000 191 249 0.250000 124 250 -0.250000 125 250 0.250000 194 250 0.250000 195 250 -0.250000 251 251 -0.500000 ";
		std::vector<T> gradeVectorComponents = decodeStringToVecOfT<T>(grade5MatrixComponents);
		Eigen::SparseMatrix<T, Eigen::ColMajor> perGradeBasisTransformMatrix		 = Eigen::SparseMatrix<T, Eigen::ColMajor>(252,252);
		perGradeBasisTransformMatrix.reserve(612);
		for(unsigned int i=0;i<612;++i)
			perGradeBasisTransformMatrix.insert((int)gradeVectorComponents[3*i],(int)gradeVectorComponents[(3*i)+1]) = gradeVectorComponents[(3*i)+2];
		return perGradeBasisTransformMatrix;
	}

	/// contains and load the components of the grade 6 inverse transformation matrix 
 	template<typename T>
	Eigen::SparseMatrix<T, Eigen::ColMajor>  loadgrade6InverseMatrix() {
		const std::string grade6MatrixComponents = " 0 0 -0.250000 1 0 -0.250000 4 1 -0.500000 2 2 -0.500000 3 3 -0.500000 0 4 0.250000 1 4 -0.250000 73 5 0.250000 76 5 0.250000 129 5 0.250000 132 5 0.250000 71 6 0.250000 74 6 0.250000 127 6 0.250000 130 6 0.250000 72 7 0.250000 75 7 0.250000 128 7 0.250000 131 7 0.250000 70 8 0.250000 126 8 0.250000 78 9 -0.500000 134 9 -0.500000 79 10 -0.500000 135 10 -0.500000 73 11 0.250000 76 11 -0.250000 129 11 0.250000 132 11 -0.250000 77 12 0.500000 133 12 0.500000 71 13 0.250000 74 13 -0.250000 127 13 0.250000 130 13 -0.250000 72 14 0.250000 75 14 -0.250000 128 14 0.250000 131 14 -0.250000 18 15 -0.250000 21 15 -0.250000 16 16 -0.250000 19 16 -0.250000 17 17 -0.250000 20 17 -0.250000 15 18 -0.250000 23 19 0.500000 24 20 0.500000 18 21 -0.250000 21 21 0.250000 22 22 -0.500000 16 23 -0.250000 19 23 0.250000 17 24 -0.250000 20 24 0.250000 94 25 0.250000 97 25 0.250000 150 25 0.250000 153 25 0.250000 95 26 0.250000 98 26 0.250000 151 26 0.250000 154 26 0.250000 92 27 0.250000 148 27 0.250000 93 28 -0.250000 96 28 -0.250000 149 28 -0.250000 152 28 -0.250000 90 29 0.250000 146 29 0.250000 91 30 0.250000 147 30 0.250000 99 31 -0.500000 155 31 -0.500000 94 32 -0.250000 97 32 0.250000 150 32 -0.250000 153 32 0.250000 95 33 -0.250000 98 33 0.250000 151 33 -0.250000 154 33 0.250000 93 34 0.250000 96 34 -0.250000 149 34 0.250000 152 34 -0.250000 38 35 -0.250000 41 35 -0.250000 36 36 -0.250000 39 36 -0.250000 37 37 -0.250000 40 37 -0.250000 35 38 -0.250000 43 39 0.500000 44 40 0.500000 38 41 -0.250000 41 41 0.250000 42 42 -0.500000 36 43 -0.250000 39 43 0.250000 37 44 -0.250000 40 44 0.250000 109 45 0.250000 112 45 0.250000 165 45 0.250000 168 45 0.250000 110 46 0.250000 113 46 0.250000 166 46 0.250000 169 46 0.250000 107 47 0.250000 163 47 0.250000 108 48 -0.250000 111 48 -0.250000 164 48 -0.250000 167 48 -0.250000 105 49 0.250000 161 49 0.250000 106 50 0.250000 162 50 0.250000 114 51 -0.500000 170 51 -0.500000 109 52 -0.250000 112 52 0.250000 165 52 -0.250000 168 52 0.250000 110 53 -0.250000 113 53 0.250000 166 53 -0.250000 169 53 0.250000 108 54 0.250000 111 54 -0.250000 164 54 0.250000 167 54 -0.250000 59 55 0.250000 62 55 0.250000 60 56 0.250000 63 56 0.250000 57 57 0.250000 58 58 -0.250000 61 58 -0.250000 55 59 0.250000 56 60 0.250000 64 61 -0.500000 59 62 -0.250000 62 62 0.250000 60 63 -0.250000 63 63 0.250000 58 64 0.250000 61 64 -0.250000 123 65 0.250000 124 65 0.250000 179 65 0.250000 180 65 0.250000 121 66 -0.250000 177 66 -0.250000 122 67 -0.250000 178 67 -0.250000 120 68 0.250000 176 68 0.250000 123 69 0.250000 124 69 -0.250000 179 69 0.250000 180 69 -0.250000 8 70 0.250000 11 70 0.250000 6 71 0.250000 9 71 0.250000 7 72 0.250000 10 72 0.250000 5 73 0.250000 13 74 -0.500000 14 75 -0.500000 8 76 0.250000 11 76 -0.250000 12 77 0.500000 6 78 0.250000 9 78 -0.250000 7 79 0.250000 10 79 -0.250000 84 80 -0.250000 87 80 -0.250000 140 80 -0.250000 143 80 -0.250000 85 81 -0.250000 88 81 -0.250000 141 81 -0.250000 144 81 -0.250000 82 82 -0.250000 138 82 -0.250000 83 83 0.250000 86 83 0.250000 139 83 0.250000 142 83 0.250000 80 84 -0.250000 136 84 -0.250000 81 85 -0.250000 137 85 -0.250000 89 86 0.500000 145 86 0.500000 84 87 0.250000 87 87 -0.250000 140 87 0.250000 143 87 -0.250000 85 88 0.250000 88 88 -0.250000 141 88 0.250000 144 88 -0.250000 83 89 -0.250000 86 89 0.250000 139 89 -0.250000 142 89 0.250000 29 90 0.250000 32 90 0.250000 30 91 0.250000 33 91 0.250000 27 92 0.250000 28 93 -0.250000 31 93 -0.250000 25 94 0.250000 26 95 0.250000 34 96 -0.500000 29 97 -0.250000 32 97 0.250000 30 98 -0.250000 33 98 0.250000 28 99 0.250000 31 99 -0.250000 103 100 0.250000 104 100 0.250000 159 100 0.250000 160 100 0.250000 101 101 -0.250000 157 101 -0.250000 102 102 -0.250000 158 102 -0.250000 100 103 0.250000 156 103 0.250000 103 104 0.250000 104 104 -0.250000 159 104 0.250000 160 104 -0.250000 49 105 0.250000 52 105 0.250000 50 106 0.250000 53 106 0.250000 47 107 0.250000 48 108 -0.250000 51 108 -0.250000 45 109 0.250000 46 110 0.250000 54 111 -0.500000 49 112 -0.250000 52 112 0.250000 50 113 -0.250000 53 113 0.250000 48 114 0.250000 51 114 -0.250000 118 115 0.250000 119 115 0.250000 174 115 0.250000 175 115 0.250000 116 116 -0.250000 172 116 -0.250000 117 117 -0.250000 173 117 -0.250000 115 118 0.250000 171 118 0.250000 118 119 0.250000 119 119 -0.250000 174 119 0.250000 175 119 -0.250000 68 120 0.250000 69 120 0.250000 66 121 -0.250000 67 122 -0.250000 65 123 0.250000 68 124 0.250000 69 124 -0.250000 125 125 -0.250000 181 125 -0.250000 73 126 0.250000 76 126 0.250000 129 126 -0.250000 132 126 -0.250000 71 127 0.250000 74 127 0.250000 127 127 -0.250000 130 127 -0.250000 72 128 0.250000 75 128 0.250000 128 128 -0.250000 131 128 -0.250000 70 129 0.250000 126 129 -0.250000 78 130 -0.500000 134 130 0.500000 79 131 -0.500000 135 131 0.500000 73 132 0.250000 76 132 -0.250000 129 132 -0.250000 132 132 0.250000 77 133 0.500000 133 133 -0.500000 71 134 0.250000 74 134 -0.250000 127 134 -0.250000 130 134 0.250000 72 135 0.250000 75 135 -0.250000 128 135 -0.250000 131 135 0.250000 186 136 -0.500000 189 136 -0.500000 187 137 -0.500000 190 137 -0.500000 184 138 -0.500000 185 139 0.500000 188 139 0.500000 182 140 -0.500000 183 141 -0.500000 191 142 1.000000 186 143 0.500000 189 143 -0.500000 187 144 0.500000 190 144 -0.500000 185 145 -0.500000 188 145 0.500000 94 146 -0.250000 97 146 -0.250000 150 146 0.250000 153 146 0.250000 95 147 -0.250000 98 147 -0.250000 151 147 0.250000 154 147 0.250000 92 148 -0.250000 148 148 0.250000 93 149 0.250000 96 149 0.250000 149 149 -0.250000 152 149 -0.250000 90 150 -0.250000 146 150 0.250000 91 151 -0.250000 147 151 0.250000 99 152 0.500000 155 152 -0.500000 94 153 0.250000 97 153 -0.250000 150 153 -0.250000 153 153 0.250000 95 154 0.250000 98 154 -0.250000 151 154 -0.250000 154 154 0.250000 93 155 -0.250000 96 155 0.250000 149 155 0.250000 152 155 -0.250000 200 156 -0.500000 201 156 -0.500000 198 157 0.500000 199 158 0.500000 197 159 -0.500000 200 160 -0.500000 201 160 0.500000 109 161 -0.250000 112 161 -0.250000 165 161 0.250000 168 161 0.250000 110 162 -0.250000 113 162 -0.250000 166 162 0.250000 169 162 0.250000 107 163 -0.250000 163 163 0.250000 108 164 0.250000 111 164 0.250000 164 164 -0.250000 167 164 -0.250000 105 165 -0.250000 161 165 0.250000 106 166 -0.250000 162 166 0.250000 114 167 0.500000 170 167 -0.500000 109 168 0.250000 112 168 -0.250000 165 168 -0.250000 168 168 0.250000 110 169 0.250000 113 169 -0.250000 166 169 -0.250000 169 169 0.250000 108 170 -0.250000 111 170 0.250000 164 170 0.250000 167 170 -0.250000 206 171 -0.500000 207 171 -0.500000 204 172 0.500000 205 173 0.500000 203 174 -0.500000 206 175 -0.500000 207 175 0.500000 123 176 0.250000 124 176 0.250000 179 176 -0.250000 180 176 -0.250000 121 177 -0.250000 177 177 0.250000 122 178 -0.250000 178 178 0.250000 120 179 0.250000 176 179 -0.250000 123 180 0.250000 124 180 -0.250000 179 180 -0.250000 180 180 0.250000 209 181 -0.500000 84 182 0.250000 87 182 0.250000 140 182 -0.250000 143 182 -0.250000 85 183 0.250000 88 183 0.250000 141 183 -0.250000 144 183 -0.250000 82 184 0.250000 138 184 -0.250000 83 185 -0.250000 86 185 -0.250000 139 185 0.250000 142 185 0.250000 80 186 0.250000 136 186 -0.250000 81 187 0.250000 137 187 -0.250000 89 188 -0.500000 145 188 0.500000 84 189 -0.250000 87 189 0.250000 140 189 0.250000 143 189 -0.250000 85 190 -0.250000 88 190 0.250000 141 190 0.250000 144 190 -0.250000 83 191 0.250000 86 191 -0.250000 139 191 -0.250000 142 191 0.250000 195 192 0.500000 196 192 0.500000 193 193 -0.500000 194 194 -0.500000 192 195 0.500000 195 196 0.500000 196 196 -0.500000 103 197 0.250000 104 197 0.250000 159 197 -0.250000 160 197 -0.250000 101 198 -0.250000 157 198 0.250000 102 199 -0.250000 158 199 0.250000 100 200 0.250000 156 200 -0.250000 103 201 0.250000 104 201 -0.250000 159 201 -0.250000 160 201 0.250000 202 202 -0.500000 118 203 0.250000 119 203 0.250000 174 203 -0.250000 175 203 -0.250000 116 204 -0.250000 172 204 0.250000 117 205 -0.250000 173 205 0.250000 115 206 0.250000 171 206 -0.250000 118 207 0.250000 119 207 -0.250000 174 207 -0.250000 175 207 0.250000 208 208 -0.500000 125 209 0.250000 181 209 -0.250000 ";
		std::vector<T> gradeVectorComponents = decodeStringToVecOfT<T>(grade6MatrixComponents);
		Eigen::SparseMatrix<T, Eigen::ColMajor> perGradeBasisTransformMatrix		 = Eigen::SparseMatrix<T, Eigen::ColMajor>(210,210);
		perGradeBasisTransformMatrix.reserve(494);
		for(unsigned int i=0;i<494;++i)
			perGradeBasisTransformMatrix.insert((int)gradeVectorComponents[3*i],(int)gradeVectorComponents[(3*i)+1]) = gradeVectorComponents[(3*i)+2];
		return perGradeBasisTransformMatrix;
	}

	/// contains and load the components of the grade 7 inverse transformation matrix 
 	template<typename T>
	Eigen::SparseMatrix<T, Eigen::ColMajor>  loadgrade7InverseMatrix() {
		const std::string grade7MatrixComponents = " 3 0 -0.250000 6 0 -0.250000 1 1 -0.250000 4 1 -0.250000 2 2 -0.250000 5 2 -0.250000 0 3 -0.250000 8 4 0.500000 9 5 0.500000 3 6 -0.250000 6 6 0.250000 7 7 -0.500000 1 8 -0.250000 4 8 0.250000 2 9 -0.250000 5 9 0.250000 60 10 -0.250000 63 10 -0.250000 88 10 -0.250000 91 10 -0.250000 61 11 -0.250000 64 11 -0.250000 89 11 -0.250000 92 11 -0.250000 58 12 -0.250000 86 12 -0.250000 59 13 0.250000 62 13 0.250000 87 13 0.250000 90 13 0.250000 56 14 -0.250000 84 14 -0.250000 57 15 -0.250000 85 15 -0.250000 65 16 0.500000 93 16 0.500000 60 17 0.250000 63 17 -0.250000 88 17 0.250000 91 17 -0.250000 61 18 0.250000 64 18 -0.250000 89 18 0.250000 92 18 -0.250000 59 19 -0.250000 62 19 0.250000 87 19 -0.250000 90 19 0.250000 24 20 0.250000 27 20 0.250000 25 21 0.250000 28 21 0.250000 22 22 0.250000 23 23 -0.250000 26 23 -0.250000 20 24 0.250000 21 25 0.250000 29 26 -0.500000 24 27 -0.250000 27 27 0.250000 25 28 -0.250000 28 28 0.250000 23 29 0.250000 26 29 -0.250000 74 30 -0.250000 75 30 -0.250000 102 30 -0.250000 103 30 -0.250000 72 31 0.250000 100 31 0.250000 73 32 0.250000 101 32 0.250000 71 33 -0.250000 99 33 -0.250000 74 34 -0.250000 75 34 0.250000 102 34 -0.250000 103 34 0.250000 39 35 0.250000 42 35 0.250000 40 36 0.250000 43 36 0.250000 37 37 0.250000 38 38 -0.250000 41 38 -0.250000 35 39 0.250000 36 40 0.250000 44 41 -0.500000 39 42 -0.250000 42 42 0.250000 40 43 -0.250000 43 43 0.250000 38 44 0.250000 41 44 -0.250000 80 45 -0.250000 81 45 -0.250000 108 45 -0.250000 109 45 -0.250000 78 46 0.250000 106 46 0.250000 79 47 0.250000 107 47 0.250000 77 48 -0.250000 105 48 -0.250000 80 49 -0.250000 81 49 0.250000 108 49 -0.250000 109 49 0.250000 53 50 -0.250000 54 50 -0.250000 51 51 0.250000 52 52 0.250000 50 53 -0.250000 53 54 -0.250000 54 54 0.250000 83 55 -0.250000 111 55 -0.250000 14 56 -0.250000 17 56 -0.250000 15 57 -0.250000 18 57 -0.250000 12 58 -0.250000 13 59 0.250000 16 59 0.250000 10 60 -0.250000 11 61 -0.250000 19 62 0.500000 14 63 0.250000 17 63 -0.250000 15 64 0.250000 18 64 -0.250000 13 65 -0.250000 16 65 0.250000 69 66 0.250000 70 66 0.250000 97 66 0.250000 98 66 0.250000 67 67 -0.250000 95 67 -0.250000 68 68 -0.250000 96 68 -0.250000 66 69 0.250000 94 69 0.250000 69 70 0.250000 70 70 -0.250000 97 70 0.250000 98 70 -0.250000 33 71 -0.250000 34 71 -0.250000 31 72 0.250000 32 73 0.250000 30 74 -0.250000 33 75 -0.250000 34 75 0.250000 76 76 -0.250000 104 76 -0.250000 48 77 -0.250000 49 77 -0.250000 46 78 0.250000 47 79 0.250000 45 80 -0.250000 48 81 -0.250000 49 81 0.250000 82 82 -0.250000 110 82 -0.250000 55 83 -0.250000 60 84 -0.250000 63 84 -0.250000 88 84 0.250000 91 84 0.250000 61 85 -0.250000 64 85 -0.250000 89 85 0.250000 92 85 0.250000 58 86 -0.250000 86 86 0.250000 59 87 0.250000 62 87 0.250000 87 87 -0.250000 90 87 -0.250000 56 88 -0.250000 84 88 0.250000 57 89 -0.250000 85 89 0.250000 65 90 0.500000 93 90 -0.500000 60 91 0.250000 63 91 -0.250000 88 91 -0.250000 91 91 0.250000 61 92 0.250000 64 92 -0.250000 89 92 -0.250000 92 92 0.250000 59 93 -0.250000 62 93 0.250000 87 93 0.250000 90 93 -0.250000 115 94 0.500000 116 94 0.500000 113 95 -0.500000 114 96 -0.500000 112 97 0.500000 115 98 0.500000 116 98 -0.500000 74 99 0.250000 75 99 0.250000 102 99 -0.250000 103 99 -0.250000 72 100 -0.250000 100 100 0.250000 73 101 -0.250000 101 101 0.250000 71 102 0.250000 99 102 -0.250000 74 103 0.250000 75 103 -0.250000 102 103 -0.250000 103 103 0.250000 118 104 0.500000 80 105 0.250000 81 105 0.250000 108 105 -0.250000 109 105 -0.250000 78 106 -0.250000 106 106 0.250000 79 107 -0.250000 107 107 0.250000 77 108 0.250000 105 108 -0.250000 80 109 0.250000 81 109 -0.250000 108 109 -0.250000 109 109 0.250000 119 110 0.500000 83 111 -0.250000 111 111 0.250000 69 112 -0.250000 70 112 -0.250000 97 112 0.250000 98 112 0.250000 67 113 0.250000 95 113 -0.250000 68 114 0.250000 96 114 -0.250000 66 115 -0.250000 94 115 0.250000 69 116 -0.250000 70 116 0.250000 97 116 0.250000 98 116 -0.250000 117 117 -0.500000 76 118 -0.250000 104 118 0.250000 82 119 -0.250000 110 119 0.250000 ";
		std::vector<T> gradeVectorComponents = decodeStringToVecOfT<T>(grade7MatrixComponents);
		Eigen::SparseMatrix<T, Eigen::ColMajor> perGradeBasisTransformMatrix		 = Eigen::SparseMatrix<T, Eigen::ColMajor>(120,120);
		perGradeBasisTransformMatrix.reserve(256);
		for(unsigned int i=0;i<256;++i)
			perGradeBasisTransformMatrix.insert((int)gradeVectorComponents[3*i],(int)gradeVectorComponents[(3*i)+1]) = gradeVectorComponents[(3*i)+2];
		return perGradeBasisTransformMatrix;
	}

	/// contains and load the components of the grade 8 inverse transformation matrix 
 	template<typename T>
	Eigen::SparseMatrix<T, Eigen::ColMajor>  loadgrade8InverseMatrix() {
		const std::string grade8MatrixComponents = " 4 0 0.250000 7 0 0.250000 5 1 0.250000 8 1 0.250000 2 2 0.250000 3 3 -0.250000 6 3 -0.250000 0 4 0.250000 1 5 0.250000 9 6 -0.500000 4 7 -0.250000 7 7 0.250000 5 8 -0.250000 8 8 0.250000 3 9 0.250000 6 9 -0.250000 31 10 0.250000 32 10 0.250000 39 10 0.250000 40 10 0.250000 29 11 -0.250000 37 11 -0.250000 30 12 -0.250000 38 12 -0.250000 28 13 0.250000 36 13 0.250000 31 14 0.250000 32 14 -0.250000 39 14 0.250000 40 14 -0.250000 18 15 -0.250000 19 15 -0.250000 16 16 0.250000 17 17 0.250000 15 18 -0.250000 18 19 -0.250000 19 19 0.250000 34 20 0.250000 42 20 0.250000 24 21 -0.250000 25 21 -0.250000 22 22 0.250000 23 23 0.250000 21 24 -0.250000 24 25 -0.250000 25 25 0.250000 35 26 0.250000 43 26 0.250000 27 27 0.250000 13 28 0.250000 14 28 0.250000 11 29 -0.250000 12 30 -0.250000 10 31 0.250000 13 32 0.250000 14 32 -0.250000 33 33 -0.250000 41 33 -0.250000 20 34 0.250000 26 35 0.250000 31 36 0.250000 32 36 0.250000 39 36 -0.250000 40 36 -0.250000 29 37 -0.250000 37 37 0.250000 30 38 -0.250000 38 38 0.250000 28 39 0.250000 36 39 -0.250000 31 40 0.250000 32 40 -0.250000 39 40 -0.250000 40 40 0.250000 44 41 -0.500000 34 42 -0.250000 42 42 0.250000 35 43 -0.250000 43 43 0.250000 33 44 0.250000 41 44 -0.250000 ";
		std::vector<T> gradeVectorComponents = decodeStringToVecOfT<T>(grade8MatrixComponents);
		Eigen::SparseMatrix<T, Eigen::ColMajor> perGradeBasisTransformMatrix		 = Eigen::SparseMatrix<T, Eigen::ColMajor>(45,45);
		perGradeBasisTransformMatrix.reserve(81);
		for(unsigned int i=0;i<81;++i)
			perGradeBasisTransformMatrix.insert((int)gradeVectorComponents[3*i],(int)gradeVectorComponents[(3*i)+1]) = gradeVectorComponents[(3*i)+2];
		return perGradeBasisTransformMatrix;
	}

	/// contains and load the components of the grade 9 inverse transformation matrix 
 	template<typename T>
	Eigen::SparseMatrix<T, Eigen::ColMajor>  loadgrade9InverseMatrix() {
		const std::string grade9MatrixComponents = " 3 0 -0.250000 4 0 -0.250000 1 1 0.250000 2 2 0.250000 0 3 -0.250000 3 4 -0.250000 4 4 0.250000 8 5 -0.250000 9 5 -0.250000 6 6 0.250000 7 7 0.250000 5 8 -0.250000 8 9 -0.250000 9 9 0.250000 ";
		std::vector<T> gradeVectorComponents = decodeStringToVecOfT<T>(grade9MatrixComponents);
		Eigen::SparseMatrix<T, Eigen::ColMajor> perGradeBasisTransformMatrix		 = Eigen::SparseMatrix<T, Eigen::ColMajor>(10,10);
		perGradeBasisTransformMatrix.reserve(14);
		for(unsigned int i=0;i<14;++i)
			perGradeBasisTransformMatrix.insert((int)gradeVectorComponents[3*i],(int)gradeVectorComponents[(3*i)+1]) = gradeVectorComponents[(3*i)+2];
		return perGradeBasisTransformMatrix;
	}

	/// contains and load the components of the grade 10 inverse transformation matrix 
 	template<typename T>
	Eigen::SparseMatrix<T, Eigen::ColMajor>  loadgrade10InverseMatrix() {
		const std::string grade10MatrixComponents = " 0 0 0.250000 ";
		std::vector<T> gradeVectorComponents = decodeStringToVecOfT<T>(grade10MatrixComponents);
		Eigen::SparseMatrix<T, Eigen::ColMajor> perGradeBasisTransformMatrix		 = Eigen::SparseMatrix<T, Eigen::ColMajor>(1,1);
		perGradeBasisTransformMatrix.reserve(1);
		perGradeBasisTransformMatrix.insert((int)gradeVectorComponents[0],(int)gradeVectorComponents[1]) = gradeVectorComponents[2];
		return perGradeBasisTransformMatrix;
	}




	/// initialize all the direct transformation matrices using array of eigen sparse matrices
	template<typename T>
	const std::array<Eigen::SparseMatrix<T, Eigen::ColMajor>,11> loadMatrices() {
		std::array<Eigen::SparseMatrix<T, Eigen::ColMajor>,11>  transformationMatrices;
		transformationMatrices[0] = loadgrade0Matrix<T>();
		transformationMatrices[1] = loadgrade1Matrix<T>();
		transformationMatrices[2] = loadgrade2Matrix<T>();
		transformationMatrices[3] = loadgrade3Matrix<T>();
		transformationMatrices[4] = loadgrade4Matrix<T>();
		transformationMatrices[5] = loadgrade5Matrix<T>();
		transformationMatrices[6] = loadgrade6Matrix<T>();
		transformationMatrices[7] = loadgrade7Matrix<T>();
		transformationMatrices[8] = loadgrade8Matrix<T>();
		transformationMatrices[9] = loadgrade9Matrix<T>();
		transformationMatrices[10] = loadgrade10Matrix<T>();
		return transformationMatrices;
	}


	/// initialize all the inverse transformation matrices using array of eigen sparse matrices
	template<typename T>
	const std::array<Eigen::SparseMatrix<T, Eigen::ColMajor>,11> loadMatricesInverse() {
		std::array<Eigen::SparseMatrix<T, Eigen::ColMajor>,11>  transformationMatrices;
		transformationMatrices[0] = loadgrade0InverseMatrix<T>();
		transformationMatrices[1] = loadgrade1InverseMatrix<T>();
		transformationMatrices[2] = loadgrade2InverseMatrix<T>();
		transformationMatrices[3] = loadgrade3InverseMatrix<T>();
		transformationMatrices[4] = loadgrade4InverseMatrix<T>();
		transformationMatrices[5] = loadgrade5InverseMatrix<T>();
		transformationMatrices[6] = loadgrade6InverseMatrix<T>();
		transformationMatrices[7] = loadgrade7InverseMatrix<T>();
		transformationMatrices[8] = loadgrade8InverseMatrix<T>();
		transformationMatrices[9] = loadgrade9InverseMatrix<T>();
		transformationMatrices[10] = loadgrade10InverseMatrix<T>();
		return transformationMatrices;
	}


}/// End of Namespace

#endif // C3GA2_BASISTRANSFORMATIONS_HPP__
